1
00:00:09,417 --> 00:00:12,360
大家好，欢迎来到 The 8-Bit Guy

2
00:00:12,360 --> 00:00:17,450
上一期我们谈到了 BASIC

3
00:00:17,450 --> 00:00:19,430
以及它对于八十年代的老电脑有多么重要

4
00:00:19,430 --> 00:00:24,270
当时我承诺给这 Super Expander 卡带出一个视频

5
00:00:24,270 --> 00:00:25,360
那现在就开始吧

6
00:00:25,360 --> 00:00:30,570
我也准备向你演示这个 VIC-20
用的 EPROM 编程器

7
00:00:30,570 --> 00:00:32,517
这卡带非常好用

8
00:00:32,517 --> 00:00:40,360
但在介绍之前
先回顾一下 VIC-20

9
00:00:40,360 --> 00:00:42,317
它发布于 1980 年

10
00:00:42,317 --> 00:00:46,950
屏幕分辨率 176x184，支持 16 色

11
00:00:46,950 --> 00:00:51,170
但大多数情况下只能用其中的 8 色

12
00:00:51,170 --> 00:00:54,917
考虑到它的年代
这显示机能并不算太糟糕

13
00:00:54,917 --> 00:00:59,217
相似价位的机器里画面比它好的

14
00:00:59,210 --> 00:01:03,250
也就 Apple II 和 Atari 400/800 了

15
00:01:03,250 --> 00:01:05,630
四通道的音频也不差了

16
00:01:05,630 --> 00:01:11,229
虽然三个是方波 还有一个噪音通道

17
00:01:17,383 --> 00:01:21,610
但这依然能吊打当年几乎所有电脑和游戏主机

18
00:01:21,610 --> 00:01:24,219
除了前面提到的 Atari 电脑

19
00:01:24,219 --> 00:01:28,000
它的缺点是内存大小

20
00:01:28,000 --> 00:01:30,630
只有 5K

21
00:01:30,630 --> 00:01:33,469
5K 听起来已经够糟糕的了 但实际更惨

22
00:01:33,469 --> 00:01:39,650
系统需要占用一部分内存
用户只能用剩下的 3.5K

23
00:01:39,650 --> 00:01:45,170
开机的时候
机器就会显示大概 3.5K 内存可用

24
00:01:45,170 --> 00:01:50,789
就算是一个学习 BASIC 的六岁小孩
也经常会发现内存不够用

25
00:01:50,789 --> 00:01:54,960
另一个缺点是自带的 BASIC

26
00:01:55,483 --> 00:01:58,939
当年 Commodore 跟微软做了个超值的交易

27
00:01:58,939 --> 00:02:05,189
只要出一笔版权费
他们就能随便预装 MS BASIC
多少台机器都没问题

28
00:02:05,189 --> 00:02:08,810
所以他们直接把 PET 上的 BASIC 搬过来用

29
00:02:08,810 --> 00:02:11,519
但 PET 只支持文本模式

30
00:02:11,519 --> 00:02:13,317
也没有声音合成器

31
00:02:13,310 --> 00:02:17,350
所以完全没必要在 BASIC 里加入
图形和声音指令

32
00:02:17,350 --> 00:02:19,220
因为机器根本不支持

33
00:02:19,220 --> 00:02:22,917
这意味着
Apple II 这样的机器有着巨大的优势

34
00:02:22,917 --> 00:02:26,550
用户可以轻易写一个 BASIC 程序来绘图

35
00:02:26,550 --> 00:02:28,739
只要使用自带的绘图指令就好

36
00:02:28,739 --> 00:02:36,483
在八十年代，自己写 BASIC 程序
还是人们经常做的事情

37
00:02:36,483 --> 00:02:41,570
当然 VIC-20 的内存扩展卡很常见

38
00:02:41,570 --> 00:02:44,079
它能给你更多的内存

39
00:02:44,079 --> 00:02:47,917
但利用上它们的程序并不多

40
00:02:47,917 --> 00:02:54,299
因为商业软件都更愿意适配原厂配置
毕竟原厂机的用户群是最大的

41
00:02:54,299 --> 00:02:58,689
如果适配高端配置的话
用户量就少了

42
00:02:58,689 --> 00:03:03,170
而且 VIC-20 上的大部分好游戏都在卡带上

43
00:03:03,170 --> 00:03:06,400
卡带程序不需要那么多内存

44
00:03:06,400 --> 00:03:11,517
但你自己写程序的话
绘图就会成为一个大问题

45
00:03:11,510 --> 00:03:19,610
如果你要画一个全屏位图
光是显存就要 4K

46
00:03:19,610 --> 00:03:25,920
这对于原厂机来说几乎不可能实现

47
00:03:25,920 --> 00:03:32,230
即使你有办法让图像放进内存
你也没多少内存跑程序了

48
00:03:32,230 --> 00:03:36,400
但在 1981 年，Commodore 发布了
Super Expander 卡带

49
00:03:36,400 --> 00:03:38,719
拆开来看一下里面长啥样

50
00:03:38,719 --> 00:03:41,249
这里塑料开的洞很有意思

51
00:03:41,249 --> 00:03:44,400
透过它可以看到外面的金属盖

52
00:03:44,400 --> 00:03:51,049
看一下电路板

53
00:03:51,049 --> 00:03:54,083
首先让我注意到的是
版权标的是 1980 年

54
00:03:54,083 --> 00:03:57,560
即使我查到这东西是 81 年推出的

55
00:03:57,560 --> 00:04:05,019
因为 VIC-20 也是 1980 年出的
也就是说，这玩意是跟 VIC-20 几乎同时研发的

56
00:04:05,019 --> 00:04:11,900
有六块 SRAM 芯片，一共 3K 的扩展内存
还有一块 4K 的 ROM

57
00:04:11,900 --> 00:04:18,070
就这么看着 这好像没啥卵用
但它实际上能极大增强机器的能力

58
00:04:18,070 --> 00:04:25,540
VIC-20 只有 3.5K 可用内存
这卡带直接就能将内存大小翻倍

59
00:04:25,540 --> 00:04:27,500
这提升确实不小

60
00:04:27,500 --> 00:04:31,390
打开这本非常薄的说明书
你会看到它给 BASIC 增加的几条指令

61
00:04:31,390 --> 00:04:35,190
比如设置图形模式、画线、画点、画圆、填充等

62
00:04:35,190 --> 00:04:40,690
它允许你在图形模式
以及三种图形模式之间切换

63
00:04:40,690 --> 00:04:45,510
最后是一些示例代码

64
00:04:45,510 --> 00:04:49,220
那我们就把卡带插进 VIC-20 看看

65
00:04:49,220 --> 00:04:53,960
首先会看到开机画面显示 6.5K 可用内存

66
00:04:53,960 --> 00:04:58,720
我们来看一下这个画三角函数的程序
代码并不长

67
00:04:58,720 --> 00:05:05,070
这种程序在原厂机上不可能实现
因为内存不够

68
00:05:05,070 --> 00:05:10,750
如果你有内存扩展卡
那你确实可以写一个类似的 BASIC 程序

69
00:05:10,750 --> 00:05:12,750
而不需要这些新的 BASIC 指令

70
00:05:12,750 --> 00:05:18,317
但代码行数会是这里的十倍
需要使用大量的 POKE 和 PEEK 指令

71
00:05:18,317 --> 00:05:20,970
结果占用更多的内存

72
00:05:20,970 --> 00:05:24,110
而且运行也会更慢

73
00:05:24,110 --> 00:05:31,440
通过提供这些扩展 BASIC 指令
程序能更小，更快，写起来也更简单了

74
00:05:31,440 --> 00:05:35,350
这是另一个 BASIC 程序，也很短
它可以绘制三维多面体

75
00:05:35,350 --> 00:05:44,417
绘图之快让人印象深刻
因为绘图由卡带里的机器码程序完成

76
00:05:44,417 --> 00:05:48,030
而不需要用 BASIC 一个一个点画

77
00:05:49,370 --> 00:05:51,300
这是另一个非常有趣的演示

78
00:05:51,300 --> 00:05:54,350
它用一系列的画圆指令画出一只加菲猫

79
00:06:07,283 --> 00:06:12,317
用一系列的指令画图像
算是一种失传的艺术

80
00:06:12,317 --> 00:06:17,183
看着图像一笔一划地画出来很有意思

81
00:06:27,550 --> 00:06:31,730
这是我要演示的最后一个程序
它绘制一些很奇怪的图

82
00:06:31,730 --> 00:06:34,083
有好几页

83
00:06:46,940 --> 00:06:50,270
不管是谁写的程序
但这看着挺像眼球的

84
00:06:50,270 --> 00:06:55,500
除了图形，卡带也给 BASIC 扩展了声音指令
以一种非常聪明的方式

85
00:06:55,500 --> 00:06:57,930
你能用 PRINT 指令放音乐

86
00:06:57,930 --> 00:07:02,220
打了引号之后
按下 Ctrl-左箭头

87
00:07:02,220 --> 00:07:07,050
屏幕显示一个反色的 F
这表示接下来的是声音，不是文本

88
00:07:07,050 --> 00:07:18,270
首先是一些参数的设置
比如 V9 表示音量 9，T 表示节拍，S 表示通道

89
00:07:18,270 --> 00:07:19,870
这里用第一通道

90
00:07:19,870 --> 00:07:23,080
用第二个八调...
然后输入几个音符

91
00:07:23,080 --> 00:07:25,280
看下是什么效果

92
00:07:27,517 --> 00:07:31,717
要把它变成一个音阶
我可以加上 A 和 B

93
00:07:31,717 --> 00:07:34,817
然后是第三个八调的 C

94
00:07:39,850 --> 00:07:47,310
我写了一个示例程序
这是我的 C64 游戏的音乐的一部分
（注：Planet X2）

95
00:07:47,310 --> 00:07:49,317
就是一长串的 PRINT 指令

96
00:07:59,550 --> 00:08:03,500
如你所见，这卡带使得
给程序加入图形和音乐变得非常简单

97
00:08:03,500 --> 00:08:07,120
最后，我对这卡带的看法怎么样

98
00:08:07,120 --> 00:08:13,450
我觉得这卡带非常好
但它本来就不应该出现

99
00:08:13,450 --> 00:08:19,710
它们一开始就应该把这卡带的所有功能
加入到机器主板里面

100
00:08:19,710 --> 00:08:24,783
因为这不是原厂机配置的一部分
几乎没有商业软件支持它

101
00:08:24,783 --> 00:08:27,583
就算你用它写自己的游戏

102
00:08:27,580 --> 00:08:30,750
那些游戏也不能在你邻居家的电脑上运行

103
00:08:30,750 --> 00:08:34,240
除非他也有这张卡带

104
00:08:34,240 --> 00:08:38,683
所以，即使它确实解决了 VIC-20 的很多问题

105
00:08:38,683 --> 00:08:42,260
在我看来，这依然是一个失败品

106
00:08:42,260 --> 00:08:48,450
既然把 VIC-20 拿出来了，就顺便演示一下
这个 VIC-20 用的 EPROM 编程器

107
00:08:48,450 --> 00:08:53,240
我真的很想向你演示它
但这玩意也没啥好说的，不值得专门出个视频

108
00:08:53,240 --> 00:08:56,530
那就简单讲讲吧

109
00:08:56,530 --> 00:09:01,460
让我们来看看这个 Aaron Katz 捐赠的编程器

110
00:09:01,460 --> 00:09:08,717
它插在 VIC-20 的卡带槽里。但你也许会留意到
虽然触点是一样的，但是板的宽度不一样

111
00:09:08,717 --> 00:09:13,530
所以插的时候要很小心
因为它不会自动对准

112
00:09:13,530 --> 00:09:15,610
看看这本 Commodore 附件购买指南

113
00:09:15,610 --> 00:09:18,417
这本书出自 VIC-20 停产的几年后

114
00:09:18,417 --> 00:09:22,417
不过上面有介绍一个 C64 用的编程器

115
00:09:22,417 --> 00:09:25,580
但是它是插在用户口上的，不是卡带口

116
00:09:25,580 --> 00:09:28,950
所以这确实很有趣
也带来了一些我原来没想到的好处

117
00:09:29,070 --> 00:09:30,420
待会儿就给大家讲

118
00:09:30,420 --> 00:09:35,440
看到电路板
我留意到它叫 PROMQUEEN，挺好的名字

119
00:09:35,440 --> 00:09:42,220
要是我没算错的话，上面有 8K 的 RAM
但没有 ROM 芯片

120
00:09:42,220 --> 00:09:47,150
所以插着它开机的时候，你不会看到什么不同

121
00:09:47,150 --> 00:09:49,230
连内存也没有变大

122
00:09:49,230 --> 00:09:54,270
你也许会以为配套软件在软盘或者磁带上

123
00:09:54,270 --> 00:09:55,270
结果并不是

124
00:09:55,270 --> 00:10:00,360
他们给你一片写了程序的 ROM
你要把它插到编程器的插座上

125
00:10:00,360 --> 00:10:03,850
这个插槽直接对应到 VIC-20 的内存映射里

126
00:10:03,850 --> 00:10:08,450
但它映射到了一个非标准的位置
所以程序不会像游戏卡带一样自动启动

127
00:10:08,450 --> 00:10:15,130
你可以在开机的时候把这片 ROM 插进去
然后键入 SYS45441 启动软件

128
00:10:15,130 --> 00:10:18,290
软件启动之后就可以把 ROM 取下来了

129
00:10:18,290 --> 00:10:22,260
因为在启动的时候它把自己复制到了 RAM 里

130
00:10:22,260 --> 00:10:27,380
软件可以读取，保存或编辑 HEX 文件
当然它也可以把文件写进 EPROM 里面

131
00:10:27,380 --> 00:10:33,060
这编程器只支持 2K 和 4K 的 EPROM
它对我用处不大

132
00:10:33,060 --> 00:10:37,920
如果能支持起码 8K EPROM 的话
也许我能让它发挥下余热

133
00:10:37,920 --> 00:10:41,730
即便如此，这也是那个年代的
一个挺有趣的设备

134
00:10:41,730 --> 00:10:49,891
我想它应该是面向业余无线电爱好者的
他们需要自己写 EPROM 来修改那些老无线电台的参数

135
00:10:49,891 --> 00:10:54,570
当然现在不需要了
现代的无线电台都能通过软件来修改

136
00:10:54,570 --> 00:11:04,020
希望这视频不会太无聊
我确实有很多像这样的外设想给大家展示

137
00:11:04,020 --> 00:11:05,470
也许很多人都没听说过这些玩意

138
00:11:05,470 --> 00:11:10,680
再过二三十年
也许就再也没什么资料介绍它们了

139
00:11:10,680 --> 00:11:15,410
我觉得记录一下他们 介绍它们的历史意义是很重要的

140
00:11:15,410 --> 00:11:19,410
让我知道你们的想法
当然 我也会有更多别的内容 记得关注哦

