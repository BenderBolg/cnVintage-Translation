1
00:00:11,000 --> 00:00:14,789
大家好，欢迎来到 The 8-Bit Guy

2
00:00:14,789 --> 00:00:20,200
最近给老旧系统写新游戏的热情
有所复苏了

3
00:00:20,280 --> 00:00:23,680
我算是加入到了这一潮流当中
开发了 Planet X2 这个游戏

4
00:00:23,680 --> 00:00:28,040
我收到了很多问题
像是我是怎么开发的

5
00:00:28,040 --> 00:00:31,380
以及现在写一个类似的游戏
是一种怎样的体验

6
00:00:31,390 --> 00:00:36,100
我想，那我就开始今天的话题
“Planet X2 的开发历程”

7
00:00:36,140 --> 00:00:41,360
首先我想说的是
我希望我的第一个游戏是面向C64的

8
00:00:41,360 --> 00:00:45,460
而且我也希望我能做出
在这个平台上独一无二的东西

9
00:00:45,460 --> 00:00:53,340
比如你不可能天天翻来覆去地
玩 Galaga 或者吃豆人的克隆版

10
00:00:53,340 --> 00:00:54,660
不管它们多么"新"...

11
00:00:54,660 --> 00:00:57,780
所以我当然想做出一些不同的

12
00:00:57,780 --> 00:01:00,960
从来没在这一平台上做过的东西

13
00:01:01,260 --> 00:01:05,060
最初的设计

14
00:01:05,920 --> 00:01:11,060
在2009年
我给 VIC-20 写了个游戏 Planet X1

15
00:01:11,070 --> 00:01:15,570
这基本上只是个 Flash Attack 的模仿重制

16
00:01:15,570 --> 00:01:23,060
它需要 32K 的内存扩展
但把整个游戏放进 32K 依然相当困难

17
00:01:23,240 --> 00:01:26,660
做这个游戏主要是对自己的一个挑战

18
00:01:26,740 --> 00:01:32,180
因为我从来没在 VIC-20 上写过游戏
尽管这是我的第一台电脑

19
00:01:32,180 --> 00:01:38,100
几年之后，我开始考虑将 Planet X1 移植到 C64

20
00:01:38,120 --> 00:01:42,400
C64 有更多的内存
以及更强大的图形机能

21
00:01:42,400 --> 00:01:44,400
那能开启什么可能性呢

22
00:01:44,409 --> 00:01:51,100
我意识到 Panet X1 非常接近
但又不完全是一个即时战略游戏

23
00:01:51,180 --> 00:01:55,820
所以我想 能不能加入更多的功能
让它像星际争霸一样

24
00:01:55,820 --> 00:02:04,100
我开始考虑星际里
有什么是可以在 C64 上实现
又有什么不能

25
00:02:04,140 --> 00:02:07,780
在一开始就发现，我需要去掉鼠标支持

26
00:02:07,780 --> 00:02:10,440
而且要降低玩家能控制的单位数量

27
00:02:10,450 --> 00:02:13,370
所以我必须重新设计游戏的整个用户界面

28
00:02:13,370 --> 00:02:16,390
而且，我一开始想把游戏做到卡带上

29
00:02:16,390 --> 00:02:18,990
把游戏做到卡带上有很多优点

30
00:02:18,990 --> 00:02:22,040
首先，卡带没有载入时间。
而且，你不需要软驱

31
00:02:22,040 --> 00:02:26,900
这是非常好的一点
比如很多人在 ebay 买的 C64

32
00:02:26,900 --> 00:02:30,060
他们手头上根本就没有软驱
也不知道怎么去搞一台

33
00:02:30,060 --> 00:02:32,340
如果游戏在卡带上的话

34
00:02:32,340 --> 00:02:38,700
他们只需要一台电脑 把卡带插进去
接上显示器或者电视机就可以了

35
00:02:38,750 --> 00:02:45,400
但是，卡带的成本太高
在游戏的预期售价上用卡带并不现实

36
00:02:45,400 --> 00:02:50,050
但是呢，虽然我必须要把游戏放软盘上

37
00:02:50,050 --> 00:02:54,120
我起码能够确保游戏能完整读入内存，在内存里运行

38
00:02:54,120 --> 00:02:56,650
这样的话在游戏过程中不会有额外的磁盘读写

39
00:02:56,650 --> 00:03:01,120
在 C64 上玩创世者

40
00:03:01,120 --> 00:03:07,330
每走两步，机器就停下来读盘
或者要我换盘，真是神烦

41
00:03:07,330 --> 00:03:10,260
我是绝对不接受这么糟糕的体验的

42
00:03:10,260 --> 00:03:13,920
图形设计

43
00:03:14,460 --> 00:03:20,200
当我想到的东西越来越多
我越来越意识到 C64 是一个挑战

44
00:03:20,260 --> 00:03:26,120
不过瓶颈不在1Mhz的CPU
不在显示和声音机能

45
00:03:26,120 --> 00:03:27,840
而在内存上

46
00:03:27,840 --> 00:03:31,280
几乎每一个设计决定
都跟内存有关

47
00:03:31,290 --> 00:03:35,160
首先要考虑的
是选择一种显示模式

48
00:03:35,160 --> 00:03:40,791
C64 有五种显示模式

49
00:03:40,791 --> 00:03:46,200
标准字符模式
就是你开机的时候看到的那种

50
00:03:46,220 --> 00:03:50,920
每一个字符只能有两种颜色
一个是你自己指定的前景色

51
00:03:50,920 --> 00:03:54,140
还有一个屏幕统一的背景色

52
00:03:54,150 --> 00:03:57,700
这种模式只需要 1K 显存

53
00:03:57,700 --> 00:04:01,500
另一个选项是用自定义字符

54
00:04:01,500 --> 00:04:06,060
你可以定义 256 个字符
并用它们来拼图

55
00:04:06,070 --> 00:04:10,250
这需要额外的 2K 内存保存自定义字符

56
00:04:10,250 --> 00:04:15,700
还有多色字符模式
分辨率减半，但每个字符可以有四种颜色

57
00:04:15,720 --> 00:04:18,700
另外一个选项是位图模式

58
00:04:18,700 --> 00:04:24,200
位图模式下你可以单独控制每个像素点
但是需要 8K 显存

59
00:04:24,200 --> 00:04:26,350
以及 1K 内存保存颜色信息

60
00:04:26,350 --> 00:04:31,400
位图模式也能支持多色
同样是牺牲分辨率换取更多的颜色

61
00:04:31,400 --> 00:04:33,640
内存占用跟普通的位图模式一样

62
00:04:33,650 --> 00:04:37,810
我觉得我不可能有足够的内存使用位图模式

63
00:04:37,810 --> 00:04:43,160
而且对于位图模式来说
我还要额外的空间保存游戏位图资源

64
00:04:43,160 --> 00:04:46,280
大概又会占用掉 4-8K 的内存

65
00:04:46,290 --> 00:04:49,880
所以我最后选择了字符模式+自定义字符

66
00:04:49,880 --> 00:04:54,620
实际上有很多游戏都是这么做的
比如创世者3

67
00:04:54,620 --> 00:05:00,000
我设计了游戏的UI
一开始我想做得有点像创世者

68
00:05:00,010 --> 00:05:01,880
所以就想出了这个设计

69
00:05:01,880 --> 00:05:05,960
这里的可视区域是 11x11 个方块

70
00:05:05,960 --> 00:05:09,460
每一个方块由四个字符组成

71
00:05:09,460 --> 00:05:13,560
因为我用的是文本模式
这些方块其实相当于单色

72
00:05:13,560 --> 00:05:16,840
但起码我能给这里的每个字符选一种颜色

73
00:05:16,840 --> 00:05:22,520
我在 C64 上写了个程序叫 TileDraw
帮助我设计图形

74
00:05:22,520 --> 00:05:28,200
这样即使用 CRT 屏幕
我也能能看清图像的每个像素
做到即见即所得

75
00:05:28,230 --> 00:05:34,000
这程序非常的简单
可以让我在一个 16x16 网格里填充黑白像素

76
00:05:34,080 --> 00:05:40,400
然后给每个象限选择十六色中的任何一种颜色

77
00:05:40,420 --> 00:05:44,640
这样，只要设计上小心一点
我就能画一些多色的东西 比如这棵树

78
00:05:44,640 --> 00:05:47,560
只要我考虑到分割线的位置

79
00:05:47,560 --> 00:05:50,640
我就能让上下两部分使用不同的颜色

80
00:05:50,640 --> 00:05:53,650
这样的例子还有这个坦克
以及这个爆炸特效

81
00:05:53,650 --> 00:05:57,580
这样能让本来只有两种颜色的图形变得更多彩一点

82
00:05:57,580 --> 00:06:02,389
但是这确实需要更多的精力
因为你不能自由的分配这些颜色

83
00:06:02,389 --> 00:06:08,460
对于水这一类的图形
需要图形的一边能接上相对的另一边

84
00:06:08,460 --> 00:06:11,520
这样在地图上才能连成一片

85
00:06:11,530 --> 00:06:14,340
TileDraw 没有保存功能

86
00:06:14,340 --> 00:06:18,460
但是它能够把图形的代码显示在屏幕上

87
00:06:18,460 --> 00:06:22,710
然后我就可以将它们插入到代码中了

88
00:06:22,710 --> 00:06:26,490
这些都是不同方块图形的代码

89
00:06:26,490 --> 00:06:30,460
在我把这些图形都画出来之后
我需要画地图

90
00:06:30,460 --> 00:06:32,800
所以我写了个地图编辑器，叫 MapDraw

91
00:06:32,800 --> 00:06:36,130
名字就是这么简单直接，哈哈

92
00:06:36,130 --> 00:06:39,430
这个程序能让我选择我创建的这些字符图形

93
00:06:39,430 --> 00:06:41,590
然后把它加入到地图中

94
00:06:41,590 --> 00:06:46,230
我加了一些小功能来提高效率
比如填充功能

95
00:06:46,230 --> 00:06:48,120
以及复制粘贴

96
00:06:48,120 --> 00:06:50,900
游戏的第一个地图就是用它画的

97
00:06:50,900 --> 00:06:54,500
当很多设计都决定下来之后

98
00:06:54,500 --> 00:06:57,760
我可以直接用 PaintShop Pro
这样的画图程序画好地图的草图

99
00:06:57,760 --> 00:07:01,360
比如陆地和水域的位置

100
00:07:01,360 --> 00:07:04,889
我甚至可以用喷刷工具把树木和草刷上去

101
00:07:04,889 --> 00:07:09,900
然后我只需要将这张图保存成点阵位图格式
导入到 MapDraw

102
00:07:09,919 --> 00:07:15,170
再在 MapDraw 里面做一些微调
新地图就画好了

103
00:07:15,170 --> 00:07:20,020
我设计了各种各样的地图
包括一张雪地背景的“Frozen”

104
00:07:20,020 --> 00:07:24,900
里面有挂满冰霜的松树，结冰的河流
以及到处都是的雪人

105
00:07:24,900 --> 00:07:30,840
我还画了一个沙漠地图
有大片的沙地，仙人掌，骷髅头骨

106
00:07:30,840 --> 00:07:32,840
还有几片绿洲

107
00:07:32,840 --> 00:07:36,920
用户界面设计

108
00:07:37,800 --> 00:07:43,500
后来我用 MapDraw 的绘图代码
作为游戏本体的基础

109
00:07:43,510 --> 00:07:46,130
就这样，Planet X2 诞生了

110
00:07:46,130 --> 00:07:51,680
这是游戏最早的版本之一
已经可以四处移动浏览了

111
00:07:51,680 --> 00:07:56,200
如果你见过游戏的最终版
你会发现很多图形看起来非常不同

112
00:07:56,260 --> 00:08:00,400
在这个版本里
你能做的事情并不多

113
00:08:00,400 --> 00:08:03,690
只能驾驶一个单位到处跑
以及在单位之间切换

114
00:08:03,690 --> 00:08:05,900
但起码游戏的基本界面能工作了

115
00:08:05,900 --> 00:08:11,900
我的想法是
这一块显示当前单位或建筑的信息

116
00:08:11,990 --> 00:08:16,210
这里是该单位或建筑的操作

117
00:08:16,210 --> 00:08:20,710
这里呢，跟创世者一样，是个信息窗口

118
00:08:20,710 --> 00:08:24,820
在单位之间切换有多种方法

119
00:08:24,820 --> 00:08:30,700
如果你能看见你要切换到的那个单位
最简单的就是，敲回车调出浏览框

120
00:08:30,740 --> 00:08:34,940
然后把框移动到你要控制的单位上
然后再敲回车 非常简单

121
00:08:35,060 --> 00:08:39,700
如果你要控制的单位在屏幕之外
你可以按它的编号所对应的数字键

122
00:08:39,780 --> 00:08:45,200
在屏幕下方，你会留意到这些数字
它们代表你能控制的十个单位

123
00:08:45,260 --> 00:08:52,100
这个小箭头指示当前选中的单位
灰色的数字表示不存在的单位

124
00:08:52,140 --> 00:08:56,220
一开始我想加入摇杆支持
但说实话，我觉得它实在太没用

125
00:08:56,220 --> 00:08:58,700
毕竟有大量功能严重依赖键盘

126
00:08:58,700 --> 00:09:01,360
而且 C64 的摇杆只有一个按钮

127
00:09:01,360 --> 00:09:06,500
所以，为了节约内存，我去掉了摇杆支持
让整个游戏完全由键盘控制

128
00:09:06,529 --> 00:09:10,529
不过我给了用户两种移动的方式
一个是 C64 的方向键

129
00:09:10,529 --> 00:09:16,400
不过对于一些人来说 这太难用
所以我也加入了别的游戏常用的WASD方向键

130
00:09:16,400 --> 00:09:18,140
你可以选择两者之一

131
00:09:18,140 --> 00:09:21,480
音乐创作

132
00:09:21,940 --> 00:09:25,120
我也想给游戏添加点音乐

133
00:09:25,120 --> 00:09:28,620
我写了自己的曲子
而且在 8-Bit Keys 的一个视频中弹过一次

134
00:09:28,620 --> 00:09:31,380
那一集叫 "Oh No, More square waves"

135
00:09:31,380 --> 00:09:36,520
我写这曲子的时候
我觉得它会成为像创始者那样的游戏的背景音乐

136
00:09:43,680 --> 00:09:46,780
我觉得把这曲子用在这游戏里非常适合

137
00:09:46,780 --> 00:09:52,700
我没有给音乐部分留多少内存
所以我写了一个非常精简的音乐播放程序

138
00:09:52,720 --> 00:09:55,940
我给键盘上的每个键分配了一个编号

139
00:09:55,940 --> 00:09:58,820
对我来说，写这种代码最简单的方式是

140
00:09:58,820 --> 00:10:01,680
把这些编号都贴到键盘上

141
00:10:01,680 --> 00:10:04,740
那么我只要把曲子弹出来
然后再逐一记录下我按的键

142
00:10:04,740 --> 00:10:09,120
然后我把它们插入到代码中，就像这样

143
00:10:15,860 --> 00:10:17,520
结果程序非常完美

144
00:10:17,530 --> 00:10:21,300
当然，SID 芯片能做出一些非常好的音乐

145
00:10:21,300 --> 00:10:24,620
但是我不能拿出一半的内存专门放音乐

146
00:10:24,620 --> 00:10:28,260
我需要把所有音乐和音效塞进 4K 的空间里面

147
00:10:28,270 --> 00:10:31,510
尽管如此
还是有空间多放几首曲子

148
00:10:31,510 --> 00:10:35,860
所以我问 Anders Jensen
能不能给游戏写几首曲子

149
00:10:35,860 --> 00:10:37,399
特别是开场音乐

150
00:10:37,400 --> 00:10:43,860
David 提出的限制明确指出
我必须回到八位机时代的一些做法上去

151
00:10:43,860 --> 00:10:51,100
只有三个通道，固定的节拍，三种声音波形
当然还有曲子长度的限制

152
00:10:51,120 --> 00:10:53,940
David 叫我写曲子的时候，我手头上没有 C64

153
00:10:53,940 --> 00:10:57,560
所以我回到我信赖的 Mac 上
用 MOTU 的音频编辑软件

154
00:10:57,560 --> 00:11:02,320
我需要个能输出
纯净锯齿波和方波的基本音源

155
00:11:02,320 --> 00:11:07,500
所以我用了个叫 PG-8X 的插件
它模拟 Roland JX 系列的老键盘

156
00:11:07,500 --> 00:11:11,630
一般来说从一个基于和弦进程的低音开始是最简单的

157
00:11:11,630 --> 00:11:13,380
那么这就成了曲子的基础

158
00:11:19,880 --> 00:11:24,460
然后，我需要一些和弦
但我不能就这么把剩下的两个通道全占了

159
00:11:24,600 --> 00:11:27,160
于是主旋律变成这样

160
00:11:30,860 --> 00:11:34,420
最后，我在这基础上加一点引子

161
00:11:40,700 --> 00:11:45,160
一般情况下，我会加入其它的一些东西

162
00:11:45,160 --> 00:11:47,220
但是这次没什么空间了

163
00:11:47,220 --> 00:11:51,950
这也就是为什么我再进一步
给可能的 MS-DOS 版本

164
00:11:51,950 --> 00:11:56,830
面向 MT-32 写了个润色后的主题曲

165
00:11:56,830 --> 00:12:00,410
对一些细心的玩家来说
这些曲子听起来会很熟悉，这不是巧合

166
00:12:00,410 --> 00:12:04,620
我的确用了像 DUNE II 一样的声音

167
00:12:04,620 --> 00:12:07,360
因为我觉得 David 的游戏跟它有很多相似的东西

168
00:12:07,370 --> 00:12:12,120
另外，因为游戏不得不大砍音乐和音效

169
00:12:12,120 --> 00:12:15,190
我想到可以让玩家玩游戏的过程中，用磁带放背景音乐

170
00:12:15,190 --> 00:12:19,920
所以我让 David 在游戏盒子里加一盘未收录音乐磁带

171
00:12:19,920 --> 00:12:23,360
内存限制

172
00:12:24,360 --> 00:12:29,850
这个游戏跟我想象中的完全不同
结果非常好

173
00:12:29,850 --> 00:12:34,360
当我意识到这游戏是个即时战略的时候

174
00:12:34,360 --> 00:12:39,540
我吓了一跳
这种游戏居然能塞进 C64 的内存里

175
00:12:39,540 --> 00:12:42,240
这让人非常印象深刻

176
00:12:42,240 --> 00:12:51,580
说明书的第一页就写了
很多技术困难是怎么克服的

177
00:12:51,580 --> 00:12:57,380
C64 有 64K 内存
在 1982 年这是一个大卖点

178
00:12:57,380 --> 00:13:04,030
不过，不是所有内存都那么容易就能用上

179
00:13:04,030 --> 00:13:10,320
6502 CPU 总共只有 64K 的地址空间

180
00:13:10,320 --> 00:13:14,580
你可能会认为那就是 64K 的 RAM

181
00:13:14,580 --> 00:13:19,540
很多人都忽略了
ROM 和 IO一样算在这 64K 地址空间里面

182
00:13:19,540 --> 00:13:22,100
那 C64 是怎么管理这一切的呢

183
00:13:22,100 --> 00:13:23,520
它用了分页

184
00:13:23,530 --> 00:13:29,900
也就是说某些内存区段
可以在 ROM、RAM、IO 之间切换

185
00:13:29,940 --> 00:13:34,060
比如，这一部分可以被卡带 ROM 占用

186
00:13:34,060 --> 00:13:37,370
这一部分，默认是 BASIC ROM

187
00:13:37,370 --> 00:13:39,660
但它也可以是卡带 ROM

188
00:13:39,660 --> 00:13:45,900
这 4K 区域是 IO
用来与声音芯片、软驱等通信

189
00:13:45,960 --> 00:13:48,390
但是它也被字符 ROM 占用

190
00:13:48,390 --> 00:13:51,580
最后的 8K 被内核 ROM 占用

191
00:13:51,580 --> 00:13:55,970
当 C64 开机的时候
内存分配时这样的

192
00:13:55,970 --> 00:14:00,589
很多人都问，在 C64 的启动画面上

193
00:14:00,589 --> 00:14:05,890
写着是 64K 内存系统
但是只有不到 40K 可用

194
00:14:05,890 --> 00:14:11,280
当你看到这张内存分配图的时候
你会发现 BASIC 只能用这一部分的内存

195
00:14:11,280 --> 00:14:13,029
这就完全合理了

196
00:14:13,029 --> 00:14:17,370
那么，看一下我是怎么分配内存的

197
00:14:17,370 --> 00:14:20,920
第一个 16K 区块存放游戏代码

198
00:14:20,920 --> 00:14:23,660
接下来的两块存放世界地图

199
00:14:23,660 --> 00:14:28,149
如你所见，地图占用了很大一部分内存

200
00:14:28,149 --> 00:14:32,361
因为游戏是完全用汇编写的
我不需要 BASIC ROM

201
00:14:32,361 --> 00:14:35,060
所以我把它关掉了
这一块变成内存

202
00:14:35,060 --> 00:14:39,279
我用它保存单位数据
以及各种图形资源

203
00:14:39,279 --> 00:14:43,250
音乐和音效都塞进了这 4K 区域里

204
00:14:43,250 --> 00:14:46,540
非常有意思的是这最后一个区域

205
00:14:46,540 --> 00:14:50,630
我必须把内核 ROM 留着
因为我需要使用内核的功能

206
00:14:50,630 --> 00:14:53,010
比如读取键盘的输入
以及磁盘读写

207
00:14:53,010 --> 00:14:56,240
所以一开始，我完全没有动那一部分

208
00:14:56,240 --> 00:15:00,520
起码在我的好友/Beta测试者
Lorin Millsap告诉我一个好建议之前

209
00:15:00,520 --> 00:15:06,540
我在很早之前就参与到了 Planet X2 的开发当中

210
00:15:06,540 --> 00:15:10,800
主要是做 Beta 测试

211
00:15:10,800 --> 00:15:14,850
有一天我问 David 进度怎么样了

212
00:15:14,850 --> 00:15:21,600
他说，不是很好
内存已经不够用了

213
00:15:21,680 --> 00:15:24,920
我看了一下他当时使用的内存分配

214
00:15:24,920 --> 00:15:30,880
说，为什么你不把你的屏幕内容
移到内核区段呢？

215
00:15:30,880 --> 00:15:34,360
原来，C64的内存管理系统非常聪明

216
00:15:34,360 --> 00:15:39,560
如果你试图写到 ROM 占用的区域
写指令会自动转移到它下面的 RAM

217
00:15:39,570 --> 00:15:42,280
毕竟，试图写数据到 ROM 里面没有任何意义

218
00:15:42,280 --> 00:15:46,270
所以，我可以随意向"内核”写数据

219
00:15:46,270 --> 00:15:51,310
那么，我设置显示芯片
将显存和字符数据转到这个区段

220
00:15:51,310 --> 00:15:55,600
显示芯片也做得很智能
无视所有的ROM，只从RAM里读取数据

221
00:15:55,600 --> 00:16:01,160
这样内核区段就非常适合做显存了
因为我没有必要去故意读里面的东西

222
00:16:01,160 --> 00:16:08,760
这 4K 区域目前没有被利用起来
因为我需要与外设交互

223
00:16:08,760 --> 00:16:12,720
被砍掉的功能

224
00:16:13,640 --> 00:16:17,290
随着游戏完成度越来越高
我不停遇到内存不够用的问题

225
00:16:17,290 --> 00:16:20,820
结果不少功能被迫删除

226
00:16:20,820 --> 00:16:24,580
甚至很多已经实现好的功能都砍了

227
00:16:24,590 --> 00:16:29,400
比如，我设计了一个叫研究所的建筑
用来研究武器之类的东西

228
00:16:29,480 --> 00:16:33,420
但出于各种各样的原因
我把它删除掉了

229
00:16:33,420 --> 00:16:36,790
不仅是为了节约内存
也为了节约方块图形

230
00:16:36,790 --> 00:16:44,860
C64 的字符集有 256 个字符
我保留了其中 64 个存放字母和数字

231
00:16:44,860 --> 00:16:45,970
这基本上是必须的

232
00:16:45,970 --> 00:16:52,560
那么还剩下 192 个字符用来定义方块
因为每个方块由四个字符组成

233
00:16:52,560 --> 00:16:54,920
我总共只能定义 48 个方块

234
00:16:54,920 --> 00:16:59,550
这包括像草和树那样的地形要素
也包括单位和建筑

235
00:16:59,550 --> 00:17:06,400
而且像工厂和外星人基地那样的大型建筑
需要 16 个字符

236
00:17:06,459 --> 00:17:11,400
实际上，这也是单位图形
不会转向的原因

237
00:17:11,489 --> 00:17:14,909
一开始我想做到这一点
但是这样每个单位

238
00:17:14,909 --> 00:17:18,589
都需要额外的方块表示各个方向
方块根本就不够用

239
00:17:18,589 --> 00:17:23,200
另外一个被删除的功能是
我曾经写了一些代码，让地图更加动态

240
00:17:23,240 --> 00:17:26,470
就像模拟城市一样
比如你炸了什么东西

241
00:17:26,470 --> 00:17:31,400
树会着火，火会蔓延
直到整个森林都烧掉

242
00:17:31,420 --> 00:17:36,640
又比如你烧了一个区域

243
00:17:36,640 --> 00:17:40,040
草会慢慢长回去

244
00:17:40,049 --> 00:17:45,800
最终，这些代码占用了大概 6K 的内存
而且这对游戏本身没什么太大作用

245
00:17:45,800 --> 00:17:50,080
我说，不管有没有这样的功能
游戏都是这么玩的，不会受到影响

246
00:17:50,080 --> 00:17:54,020
所以我就把它去掉了
给其它更重要的功能留空间

247
00:17:54,029 --> 00:17:56,989
我原来还计划了很多别的建筑

248
00:17:56,989 --> 00:18:00,120
比如一个可以建在矿场旁边的建筑

249
00:18:00,120 --> 00:18:04,500
然后你就可以把采到的矿
直接运到那里去冶炼

250
00:18:04,500 --> 00:18:07,400
不用跑大老远回到工厂

251
00:18:07,400 --> 00:18:10,440
但我内存不够用了
最后只好去掉

252
00:18:10,440 --> 00:18:13,340
把这个功能整合到工厂里

253
00:18:13,340 --> 00:18:17,040
我还想做各种各样的飞行单位和船只

254
00:18:17,040 --> 00:18:23,380
以及各种不同的建筑和武器
但是最终还是内存不够

255
00:18:23,380 --> 00:18:25,330
所以没做到游戏里面

256
00:18:25,330 --> 00:18:28,549
外星人的 AI 做起来非常有挑战性

257
00:18:28,549 --> 00:18:33,090
游戏里的每个单位
占了 14 个字节的内存

258
00:18:33,090 --> 00:18:38,980
保存了像 XY 坐标，单位类型
当前生命值，目的地坐标等

259
00:18:38,980 --> 00:18:44,360
所以并没有足够的内存
来保存一个预定义的行进轨迹

260
00:18:44,360 --> 00:18:47,440
所以这些外星人像昆虫一样移动

261
00:18:47,440 --> 00:18:51,480
它们可以自动绕过小的障碍

262
00:18:51,489 --> 00:18:55,789
如果它们被卡住太久了
它们会随机乱跑十个周期

263
00:18:55,789 --> 00:18:58,600
然后再试图走到原先的目的地

264
00:18:58,600 --> 00:19:03,159
这对在森林里穿梭
以及绕过石头之类的东西非常有效

265
00:19:03,160 --> 00:19:08,660
但是没有办法让它们走出一条复杂路径
比如绕过河流

266
00:19:08,660 --> 00:19:13,900
所以我给外星人加上了游泳的能力
不过速度会相对慢一点

267
00:19:13,920 --> 00:19:16,420
尽管如此，我还是要小心设计地图

268
00:19:16,420 --> 00:19:21,899
确保从外星人基地到玩家默认基地之间
永远有一条可行的路径

269
00:19:21,899 --> 00:19:26,460
不然这些外星人就会
卡在一些奇怪的障碍中 永远走不出来

270
00:19:26,460 --> 00:19:32,280
很多人问我为什么基地位置不是随机的
这就是答案

271
00:19:32,280 --> 00:19:37,400
我还想做一个小地图
像星际里的一样

272
00:19:37,420 --> 00:19:42,080
屏幕肯定是无法同时放下小地图
和其余的游戏界面的

273
00:19:42,080 --> 00:19:45,140
但是我想可以做个功能键

274
00:19:45,140 --> 00:19:50,040
在另一屏显示地图
让你知道自己在哪儿

275
00:19:50,040 --> 00:19:52,720
以及河流什么的位置

276
00:19:52,720 --> 00:19:56,720
即使用位图模式肯定没戏
但我想应该可以用个粗糙的字符拼图

277
00:19:56,720 --> 00:19:59,640
简单表示一下各种东西在什么位置

278
00:19:59,640 --> 00:20:03,080
Beta 测试

279
00:20:03,700 --> 00:20:07,220
测试占用了很大一部分的开发时间

280
00:20:07,220 --> 00:20:10,200
在开发早期
我可以做个改动，编译

281
00:20:10,200 --> 00:20:12,400
然后一启动游戏就能知道
程序是否正常

282
00:20:12,400 --> 00:20:16,360
但随着进度越来越深入
测试变得越来越耗时

283
00:20:16,360 --> 00:20:19,560
比如，如果我修改了敌人AI的行为

284
00:20:19,560 --> 00:20:25,080
我就不得不玩10-15分钟游戏
观察外星人的行为是否正常

285
00:20:25,080 --> 00:20:27,960
如果不正常
那我就得再去改代码

286
00:20:27,960 --> 00:20:29,680
然后从头测试一遍

287
00:20:29,690 --> 00:20:35,000
我确实有几个 Beta 测试者
但我不觉得有谁比 Lorin Millsap 更尽力

288
00:20:35,060 --> 00:20:39,540
我做了大量 Planet X2
的 Beta 测试

289
00:20:39,540 --> 00:20:45,420
早期一般是寻找 bug
我们找到了不少，而且能修复它们

290
00:20:45,420 --> 00:20:51,080
后期主要变成了对游戏难度的调整

291
00:20:51,080 --> 00:20:55,140
我们的目标是做一个有趣
并且能让人过瘾的游戏

292
00:20:55,140 --> 00:20:59,380
它要有一定的难度
来引起玩家的兴趣

293
00:20:59,380 --> 00:21:03,640
又不能太难
让玩游戏变成受罪

294
00:21:03,640 --> 00:21:10,480
到最后，我认为我们实现了这个目标
我非常享受这个游戏

295
00:21:10,480 --> 00:21:13,210
希望大家也一样

296
00:21:13,210 --> 00:21:19,980
测试过程中，我玩了大概十个小时
找到了大量 bug

297
00:21:19,980 --> 00:21:22,840
我把它们都报告给了 David

298
00:21:22,840 --> 00:21:28,380
结果发现大部分的 bug 他都知道

299
00:21:28,389 --> 00:21:32,299
而且很多在我发邮件给他之前都修复了

300
00:21:32,299 --> 00:21:35,950
当整个游戏完成的时候
我还剩下 12 个字节的内存

301
00:21:35,950 --> 00:21:40,700
但是我努力让最核心的功能实现起来
整个游戏有很好的动态性

302
00:21:40,700 --> 00:21:42,580
所以我对它非常满意

303
00:21:42,580 --> 00:21:45,820
量产

304
00:21:46,340 --> 00:21:50,420
随着游戏接近完成
我意识到要加快速度

305
00:21:50,429 --> 00:21:54,740
并且开始准备其它的材料
比如盒子、说明书、磁盘标签

306
00:21:54,740 --> 00:21:59,029
它们都要提前设计好
因为它们需要几个星期

307
00:21:59,029 --> 00:22:00,529
甚至几个月的时间才能送到

308
00:22:00,529 --> 00:22:03,139
所以我想在游戏完成的时候
把它们全部都准备好

309
00:22:03,140 --> 00:22:07,080
关于封面图，我根本不知道应该找谁去做

310
00:22:07,080 --> 00:22:10,300
正好在那个时候，我收到了
来自 Neil Rieske 的捐赠

311
00:22:10,300 --> 00:22:13,399
里面有张很有意思的手绘

312
00:22:13,400 --> 00:22:17,580
我给他发邮件
问他是否愿意帮我设计封面图

313
00:22:17,580 --> 00:22:21,539
我给了他100刀 不是很多
但是我希望够用

314
00:22:21,539 --> 00:22:25,119
我发了几张游戏截图
告诉他我希望看到一座金字塔

315
00:22:25,119 --> 00:22:26,460
还有一辆坦克在前面

316
00:22:26,460 --> 00:22:28,710
第二天他发给我这张原型

317
00:22:28,710 --> 00:22:33,700
我告诉他，这正是我想要的
但是防卫不应该飞在天上

318
00:22:33,769 --> 00:22:37,970
但是我确实很喜欢这种效果
所以我想了一下，跟他说

319
00:22:37,970 --> 00:22:41,160
毕竟我们看到的是防卫的顶视图

320
00:22:41,160 --> 00:22:44,239
也许这些防卫是座高塔
下面有根柱子支撑着

321
00:22:44,239 --> 00:22:47,230
所以他稍微修改了一下这张图
加了几根柱子

322
00:22:47,230 --> 00:22:51,060
我觉得这非常好
于是我们讨论了一些细节改动

323
00:22:51,060 --> 00:22:53,920
很快他发给我这张图

324
00:22:53,920 --> 00:22:55,560
然后是这张

325
00:22:55,560 --> 00:22:58,580
最后加的就是一些星星 以及细节阴影了

326
00:22:58,590 --> 00:23:00,840
这就是最终的效果

327
00:23:00,840 --> 00:23:05,049
当然 有封面图很好
但这还不是一个完整的包装盒设计

328
00:23:05,049 --> 00:23:08,159
幸运的是，Anders Jensen 接受了
设计盒子的任务

329
00:23:08,160 --> 00:23:12,380
一天他碰巧来到我家
我们一起讨论盒子应该怎么设计

330
00:23:12,380 --> 00:23:15,470
我拿起了这老游戏 Space Rogue 的盒子

331
00:23:15,470 --> 00:23:19,200
我不是很喜欢那游戏
但是我很喜欢这盒子的设计

332
00:23:19,200 --> 00:23:23,179
里面包含一张五寸盘 和一本说明书
放得非常工整

333
00:23:23,180 --> 00:23:26,560
于是，他量了一下盒子的尺寸
并开始为它设计封面

334
00:23:26,560 --> 00:23:31,279
在 David 给我看了那 Space Rogue 盒子之后
我有了一些灵感

335
00:23:31,279 --> 00:23:36,700
对于像这样的项目，我会用 InDesign 做
因为我们最终会交给专业的印刷厂

336
00:23:36,769 --> 00:23:40,690
首先，我必须要确保
盒子的所有平面都合理放置了

337
00:23:40,690 --> 00:23:45,660
这个图层标示了盒子的各个面

338
00:23:45,660 --> 00:23:48,600
我觉得既然游戏在一个外星球展开

339
00:23:48,600 --> 00:23:53,440
一个深蓝色的有星星
和星球的背景会很有氛围

340
00:23:53,450 --> 00:23:58,039
然后我用橙黄色的色调
作一种对比...

341
00:23:58,039 --> 00:24:01,789
我已经花了一点时间
设计不同形态的Logo

342
00:24:01,789 --> 00:24:06,200
David 喜欢蓝色和黄色
而且他在开场画面里用了这个设计

343
00:24:06,289 --> 00:24:08,200
所以这个已经是定下来了

344
00:24:08,200 --> 00:24:10,659
封底也需要留意一下

345
00:24:10,659 --> 00:24:15,800
用 David 之前发的截图
我开始对图片和文字进行排版

346
00:24:15,869 --> 00:24:19,099
最后是这样的
我对这盒子的设计非常满意

347
00:24:19,099 --> 00:24:23,700
我不认为别人能做得比他更好了
所以我非常满意

348
00:24:23,769 --> 00:24:28,039
我写了说明书的大部分文本内容

349
00:24:28,040 --> 00:24:33,500
但是说到怎么排版
怎么让它读起来舒服而有条理

350
00:24:33,500 --> 00:24:36,040
我知道我需要找人帮忙

351
00:24:36,049 --> 00:24:39,389
幸运的是，Anders
帮忙把说明书也做了

352
00:24:39,389 --> 00:24:42,470
我非常感激
因为这给我减轻了不少负担

353
00:24:42,470 --> 00:24:45,799
我觉得这一部分也许
是需要投入最多精力的

354
00:24:45,799 --> 00:24:50,220
它需要提供足够的信息 还要读起来顺畅
而不是空泛而读起来痛苦的

355
00:24:50,220 --> 00:24:54,620
所以我参考了别的一些说明书 以及之前的经验
我整理了一个非常自然的结构

356
00:24:54,620 --> 00:24:58,960
包括游戏的简介
如何加载运行和操作游戏

357
00:24:58,960 --> 00:25:02,640
然后是游戏中各功能组件的细节

358
00:25:02,640 --> 00:25:04,560
最后，是游戏的地图
以备参考

359
00:25:04,560 --> 00:25:08,900
到最后 我感觉这是一个非常好的产品

360
00:25:08,900 --> 00:25:12,660
跟盒子一样
我对说明书的效果也非常满意

361
00:25:12,660 --> 00:25:14,500
我也没法要求给这游戏
做个比这更好的说明书了

362
00:25:14,500 --> 00:25:19,080
说到说明书
我决定把游戏的地图印到说明书上

363
00:25:19,080 --> 00:25:22,180
毕竟小地图砍了

364
00:25:22,190 --> 00:25:23,789
我觉得这是一个很好的妥协

365
00:25:23,789 --> 00:25:28,700
不过呢 我加了一个大大的剧透提醒
一些人会喜欢独自探索地图

366
00:25:28,700 --> 00:25:30,320
而不是去看这里的地图

367
00:25:30,320 --> 00:25:34,700
但是 我们也决定把最后一张地图
从说明书里去掉

368
00:25:34,700 --> 00:25:37,860
"Urban Ruins"，这是我最喜欢的地图之一

369
00:25:37,860 --> 00:25:42,539
背景是一个城市遗址
这个地图不会出现在说明书里

370
00:25:42,539 --> 00:25:44,289
你必须自己去探索

371
00:25:44,289 --> 00:25:50,020
当然 对这些东西的真正考验
还要看它们能不能打动挑剔的 LGR

372
00:25:50,020 --> 00:25:53,040
所以我给他发了一份
让我们听听他有什么要说的

373
00:25:53,040 --> 00:25:58,559
即使还没开始玩这个游戏
Planet X2 光凭这个包装就能让我印象深刻

374
00:25:58,559 --> 00:26:02,139
我非常欣赏
这个干净整洁的包装设计

375
00:26:02,139 --> 00:26:05,649
盒子非常结实 而且有一层亚光表面
摸起来非常柔软舒服

376
00:26:05,649 --> 00:26:10,279
它的大小
正好符合它要模仿的那个时代

377
00:26:10,280 --> 00:26:14,140
与八十年代的
C64 和 C128 游戏盒子非常相似

378
00:26:14,140 --> 00:26:18,820
像是 SSI、Microprose
尤其是 Origin System 的游戏

379
00:26:18,820 --> 00:26:23,020
实际上 从盒子的尺寸
到角落里的系统要求标签

380
00:26:23,020 --> 00:26:27,149
到盒子后面的排版
都非常完美地契合了 Origin 的画风
（因为就是抄它的）

381
00:26:27,149 --> 00:26:34,100
当然 我也非常喜欢
游戏附送的音乐磁带 以及全彩的说明书

382
00:26:34,100 --> 00:26:37,120
尤其是说明书
编排得非常完美

383
00:26:37,120 --> 00:26:39,580
甚至比八十年代的做得还要好

384
00:26:39,580 --> 00:26:41,500
当年一般都是黑白的

385
00:26:41,500 --> 00:26:44,259
而且都不会深入到游戏开发的细节

386
00:26:44,260 --> 00:26:49,240
嗯 就我来说 要给 Planet X2 的
外在设计打个大大的赞

387
00:26:50,180 --> 00:26:53,780
磁盘标签是我自己设计的
我找了一家专业的标签生产公司

388
00:26:53,780 --> 00:26:56,280
这些标签一卷有一百张

389
00:26:56,280 --> 00:26:59,080
它们不是纸
而是用塑料做的

390
00:26:59,080 --> 00:27:01,889
撕都撕不烂

391
00:27:01,889 --> 00:27:04,190
所以应该能坚持很久

392
00:27:04,190 --> 00:27:06,779
当然，很多人问我
从哪里搞到的软盘

393
00:27:06,780 --> 00:27:11,460
当然，没有人做全新的软盘了

394
00:27:11,460 --> 00:27:14,139
但你还能买到成吨的库存货

395
00:27:14,139 --> 00:27:17,529
这些 KAO 的盘就是我从 ebay 买的

396
00:27:17,529 --> 00:27:22,620
一箱十盒 一盒十张盘
一共是一百张

397
00:27:22,620 --> 00:27:29,700
有意思的是 上面标的是
“供政府和教育机构使用 非卖品”

398
00:27:29,729 --> 00:27:32,179
估计里面有一段故事

399
00:27:32,179 --> 00:27:35,389
有一个好的是
附送的磁盘袋子是空白的

400
00:27:35,389 --> 00:27:43,700
像这些柯达的盘 袋子都印着 Logo
并不适合做商业游戏的盘

401
00:27:43,739 --> 00:27:48,279
还有一个优点是
这些 KAO 盘的标签非常容易撕下来

402
00:27:48,279 --> 00:27:50,109
不会有残胶

403
00:27:50,109 --> 00:27:57,400
为了把游戏写到软盘上
我把 SD-2-IEC 软驱模拟器接到 C128 上

404
00:27:57,479 --> 00:28:00,399
然后把 SD 卡里的文件
复制到真的软盘上

405
00:28:00,399 --> 00:28:04,969
但是这速度实在太慢
一张盘要拷七分钟

406
00:28:04,969 --> 00:28:08,929
于是我用一个老程序
Fast Hack'em 来克隆软盘

407
00:28:08,929 --> 00:28:14,180
有意思的是
这个程序会把代码传到软驱的内存里

408
00:28:14,180 --> 00:28:15,620
程序实际上是在软驱上运行的

409
00:28:15,620 --> 00:28:22,700
所以 开始克隆之后
可以直接把 C128 关掉 软驱会继续克隆
（光盘复制机鼻祖）

410
00:28:22,719 --> 00:28:26,950
克隆完成之后 我可以换一张新盘
然后会自动开始克隆

411
00:28:26,950 --> 00:28:30,419
克隆一张盘只需要六十秒
还带完整性校验

412
00:28:30,419 --> 00:28:36,300
当然 每隔大概五张盘 我就会拿一张测试
我把 C64 开着放在旁边以备测试

413
00:28:36,369 --> 00:28:42,900
到目前为止 我还没发现一张克隆失败
或者克隆后读不出来的盘

414
00:28:42,960 --> 00:28:46,330
克隆之后 我贴上标签

415
00:28:46,330 --> 00:28:49,539
我对标签贴得直不直
有非常强的强迫症

416
00:28:49,540 --> 00:28:55,220
贴完之后套进透明塑料袋里

417
00:28:55,220 --> 00:29:00,480
盒子到的时候是十几个盒子一箱
包着塑料包装袋

418
00:29:00,480 --> 00:29:05,700
我只需要把盒子打开
放进说明书和软盘

419
00:29:05,700 --> 00:29:08,620
还有音乐磁带 就完成了

420
00:29:08,629 --> 00:29:13,239
当然 有些顾客想要签名版
我还要在上面签名

421
00:29:13,239 --> 00:29:16,999
然后就装箱发货了

422
00:29:16,999 --> 00:29:20,169
我对游戏的需求之旺盛感到非常惊讶

423
00:29:20,169 --> 00:29:22,340
之前我跟几个自制游戏开发者聊过

424
00:29:22,340 --> 00:29:27,260
他们说销量会在
300 份到 800 份左右

425
00:29:27,269 --> 00:29:31,700
于是 我订了做五百份的材料

426
00:29:31,700 --> 00:29:36,049
两百份交给 Anders Jensen
让他在欧洲分销

427
00:29:36,049 --> 00:29:38,429
我对这销量感到非常惊讶

428
00:29:38,429 --> 00:29:41,659
第一天就卖了八十份

429
00:29:41,659 --> 00:29:45,120
第二天早上我就拿着
几筐子东西去邮局

430
00:29:45,120 --> 00:29:47,969
我已经收到了不少关于游戏的反馈了

431
00:29:47,969 --> 00:29:51,020
在评论区里看到一条

432
00:29:51,020 --> 00:29:56,800
说是如果这游戏出在 1987
David 能成百万富翁
（然而现在是 2017）

433
00:29:56,809 --> 00:29:58,849
我想 这完全有可能

434
00:29:58,849 --> 00:30:06,260
我想，如果让当年英国的
 Zap64 和 Commodore Format 来评测

435
00:30:06,260 --> 00:30:11,200
分数一定不会低
估计有 92 到 97 分

436
00:30:11,200 --> 00:30:15,490
会拿很多的奖
像是 Zap Sizzler 之类的

437
00:30:15,490 --> 00:30:17,969
当然也会非常非常的流行

438
00:30:17,969 --> 00:30:20,120
所以 我完全同意这个说法

439
00:30:20,120 --> 00:30:23,200
未来计划

440
00:30:23,420 --> 00:30:25,980
那 会有后续吗？

441
00:30:25,980 --> 00:30:31,700
说实话 我对游戏里砍了
这么多东西感到非常可惜

442
00:30:31,710 --> 00:30:34,259
但尽管如此 这游戏还是
收到了非常好的反响

443
00:30:34,259 --> 00:30:37,759
所以 这让我非常想做一个续作

444
00:30:37,759 --> 00:30:40,779
说实话 看回这个内存分配

445
00:30:40,780 --> 00:30:45,420
我想过 如果我花几个月
重写一部分代码

446
00:30:45,420 --> 00:30:48,440
我也许可以用上这里的 4K 内存

447
00:30:48,440 --> 00:30:53,320
再加上一些优化
估计能多个 5-6K 的内存

448
00:30:53,320 --> 00:30:55,779
可以让我加入更多的内容
出个续作

449
00:30:55,779 --> 00:30:58,940
我也可以面向 Plus/4 出个移植版

450
00:30:58,940 --> 00:31:01,200
这真的不会太难

451
00:31:01,200 --> 00:31:05,020
大概五到六个星期就可以完成

452
00:31:05,020 --> 00:31:12,640
因为它一样有 64K 的内存
而且图形系统完全可以满足需求

453
00:31:12,649 --> 00:31:17,489
不过呢 我想如果我真的出续作
我更应该把精力放在

454
00:31:17,489 --> 00:31:21,869
有更多内存的平台上
（三句不离内存...）

455
00:31:21,869 --> 00:31:24,440
比如说 C128

456
00:31:24,440 --> 00:31:30,500
这机器绝对可以实现
我原来设想中的全部内容

457
00:31:30,500 --> 00:31:37,100
又或者说，Apple II GS
也会是这个游戏的绝佳平台

458
00:31:37,139 --> 00:31:43,900
不过我在游戏发售后做过一个调查
可以发现 MS-DOS 版本是最多人想要的

459
00:31:43,960 --> 00:31:48,860
PC 一个非常爽的地方是
我有 640K 的内存可以用

460
00:31:48,860 --> 00:31:51,120
这是 C64 的足足十倍啊
（你用下 XMS 还能上 G）

461
00:31:51,120 --> 00:31:55,509
所以我试着画一下
游戏在 PC 上会长什么样子

462
00:31:55,509 --> 00:31:58,679
这是 C64 版本的截图

463
00:31:58,679 --> 00:32:03,109
我改一下调色板
看看 CGA 下会长什么样子

464
00:32:03,109 --> 00:32:04,950
结果是这样的

465
00:32:04,950 --> 00:32:09,089
当然这不是实机截图
但是它的确符合 CGA 的调色板

466
00:32:09,089 --> 00:32:13,739
我想到 C64 版本用的是字符模式

467
00:32:13,739 --> 00:32:16,999
UI 也是基于这一点设计的

468
00:32:17,000 --> 00:32:22,700
既然 CGA 是图形模式
自由度会更大一点

469
00:32:22,700 --> 00:32:25,039
所以我做了个这样的设计
（结果丑出天际）

470
00:32:25,039 --> 00:32:30,300
当然我也想看看 16 色的 EGA

471
00:32:30,359 --> 00:32:31,979
效果是这样的

472
00:32:31,979 --> 00:32:34,049
看着还真不错
（无力吐槽）

473
00:32:34,049 --> 00:32:36,620
不过我想如果真出 MS-DOS 版本

474
00:32:36,620 --> 00:32:42,900
我估计要请个美工给我画图
我对这方面并不在行

475
00:32:43,140 --> 00:32:47,940
做 C64 版本的时候我想过众筹
但最终还是没有这么做

476
00:32:47,940 --> 00:32:50,960
我觉得 PC 版本的开发 我估计会众筹

477
00:32:50,970 --> 00:32:54,759
因为我想对市场需求有更好的了解

478
00:32:54,760 --> 00:32:58,640
如果需求真的像我想的那么大的话
我会考虑招人

479
00:32:58,640 --> 00:33:02,970
比如说 像素图形 还有音乐

480
00:33:02,970 --> 00:33:05,260
这些都能找到比我更好的人来做

481
00:33:05,260 --> 00:33:06,920
这样能把游戏做得更好

482
00:33:06,920 --> 00:33:11,100
当然我要有钱才能去招人

483
00:33:11,560 --> 00:33:17,800
最后 我觉得一个 DOS 版本会非常好
比如这台 Tandy 1000

484
00:33:17,889 --> 00:33:20,589
当然如果游戏能在这些老机子上运行
那么新一点的问题都不会太大

485
00:33:20,589 --> 00:33:25,089
比如386、486和奔腾（586）
（别到时候成了 Tandy 独占就好 2333）

486
00:33:25,089 --> 00:33:30,200
最后 我希望没有打击
任何想自己写游戏的人的信心

487
00:33:30,279 --> 00:33:31,880
这的确非常辛苦 但是也非常有成就感

488
00:33:31,880 --> 00:33:37,120
我也希望我能够
鼓励更多人写自己的游戏

489
00:33:37,120 --> 00:33:39,780
这集节目就到此为止了

490
00:33:39,789 --> 00:33:43,820
希望大家喜欢
后续会有更多精彩内容

491
00:33:43,820 --> 00:33:46,139
谢谢观看

