1
00:00:12,340 --> 00:00:16,180
让我们想象一下，现在是1986年，你有一台PC

2
00:00:16,180 --> 00:00:21,980
那个时候我们不叫它 MS-DOS 电脑，而是 IBM PC 兼容机
（或 PCAT）

3
00:00:21,980 --> 00:00:26,720
除非你确实有 IBM 的机器，或者也就是只有 IBM 的机器
（那就叫原装机了）

4
00:00:26,720 --> 00:00:31,350
不论如何，那个时候你能用的音频选项有哪些

5
00:00:31,350 --> 00:00:35,830
99% 的 PC 只有所谓的 PC 喇叭

6
00:00:35,830 --> 00:00:40,120
这个喇叭会发出我们熟悉的方波

7
00:00:40,720 --> 00:00:42,000
它是怎么做到的呢

8
00:00:42,160 --> 00:00:46,370
你有各种组件，像 CPU、RAM 以及视频芯片

9
00:00:46,370 --> 00:00:49,460
也有像键盘、串口、并口这样的输入输出端口

10
00:00:49,460 --> 00:00:51,830
然后就是 PC 喇叭

11
00:00:51,830 --> 00:00:59,140
CPU 可以读写内存并将信息输出到画面或输入输出控制器上

12
00:00:59,140 --> 00:01:01,360
它也可以将信息发送到 PC 喇叭上

13
00:01:01,360 --> 00:01:05,320
准确的说，控制喇叭的系统定时器

14
00:01:06,160 --> 00:01:08,640
只要声音频率在定时器里被设定了

15
00:01:08,640 --> 00:01:11,979
就能在 CPU 不介入的情况下发出声音

16
00:01:11,980 --> 00:01:18,220
从各种角度来看，你可以把 PC 喇叭视为一个只能
产生方波的单声部合成器

17
00:01:18,860 --> 00:01:23,340
有些程序员就让喇叭的播放频率非常迅速

18
00:01:23,340 --> 00:01:29,200
就能给人带来一种有超过一种声部的假象

19
00:01:30,920 --> 00:01:35,400
有些游戏甚至能让 PC 喇叭产生数字采样

20
00:01:37,040 --> 00:01:40,480
但因为是1位的音频设备，听起来并不好

21
00:01:41,400 --> 00:01:44,180
真正的问题是当要产生数字采样的时候

22
00:01:44,180 --> 00:01:49,760
就需要读取 RAM 的每一个字节来精确控制 PC 喇叭的节奏

23
00:01:49,760 --> 00:01:53,460
为了产生这个声音，CPU 的资源几乎会被耗尽

24
00:01:53,460 --> 00:01:56,000
若干年之后，像声霸卡这样的声卡诞生之后

25
00:01:56,000 --> 00:01:58,160
它们具备一种叫做 DMA 的东西
（Direct Memory Access，直接内存访问）

26
00:01:58,760 --> 00:02:04,260
这就意味着 CPU 仅仅需要简单的向声卡发出指令，
告诉它采样位于内存的哪个地址

27
00:02:04,260 --> 00:02:08,820
声卡就可以接受这个指令来从内存读取采样并独立播放出来

28
00:02:08,820 --> 00:02:11,920
这样 CPU 就可以进行自己的工作了

29
00:02:11,920 --> 00:02:17,400
不过，1986 年，一款专为 IBM PC 兼容机设计的外设
 Covox Speech Thing 诞生了

30
00:02:17,720 --> 00:02:21,540
当然，那个时候 Covox 就是为那个时候的老电脑播放采样而已

31
00:02:21,540 --> 00:02:24,880
比如说这个为 C64 设计的 Covox Voice Master

32
00:02:24,880 --> 00:02:31,860
不过我现在要告诉你的是，我没有原装的这个为 IBM PC
设计的 Covox 外设

33
00:02:32,040 --> 00:02:35,360
实际上，几乎找不到，非常稀有

34
00:02:35,480 --> 00:02:41,100
我收到了一份捐赠，被叫做 CVX4 的复刻版 Covox

35
00:02:41,600 --> 00:02:44,960
我就用这个代替原装 Covox 来演示

36
00:02:45,080 --> 00:02:49,320
我需要一台电脑来演示，我觉得这个486笔记本很合适

37
00:02:49,320 --> 00:02:53,680
因为它没声卡，也没有办法加装声卡

38
00:02:53,680 --> 00:02:55,440
但至少可以玩 DOS 游戏

39
00:02:55,440 --> 00:02:57,840
我把这个 Covox 复刻连接上去

40
00:03:01,280 --> 00:03:05,159
然后我需要用这个80年代的松下录音机来回放

41
00:03:05,159 --> 00:03:09,150
为了让你们能听得更清楚，我还会把声音分流出来

42
00:03:09,150 --> 00:03:12,000
分流到我的 Zoom H4N 上，这样就可以单独录制了

43
00:03:12,440 --> 00:03:14,140
那么 Covox 用着怎么样呢

44
00:03:14,140 --> 00:03:20,280
IBM PC 兼容的并口有很多针孔，但只有8个是受 CPU 的意愿控制的

45
00:03:20,580 --> 00:03:23,130
它们就是基本用途的输入输出针孔

46
00:03:23,130 --> 00:03:25,719
如果一起用的话可以产生一个8位数值

47
00:03:25,720 --> 00:03:29,800
Covox 是一个 8 位 DAC

48
00:03:29,800 --> 00:03:35,340
它可以将8位数字信号转换成模拟信号，也就是线路输入

49
00:03:35,340 --> 00:03:39,060
在很多方面，它和  PC 喇叭的工作方式比较接近

50
00:03:39,060 --> 00:03:45,360
就是连接到了 I/O 芯片上，CPU 还是需要将信息
从 RAM 上逐个字节转移

51
00:03:45,740 --> 00:03:49,060
但至少这是 8 位了，不像 1 位的 PC 喇叭

52
00:03:49,620 --> 00:03:51,880
听起来如何呢？

53
00:03:51,880 --> 00:03:56,300
在 DOS 的年代，有很多播放器能处理
Amiga MOD Tracker 的音频文件

54
00:03:56,300 --> 00:03:59,880
这就是其中一个能在 DOS 机器上播放音频的程序

55
00:03:59,880 --> 00:04:04,080
首先设置成 PC 喇叭来听听看如何

56
00:04:04,760 --> 00:04:08,620
因为声音十分微弱，我需要将麦克风正对着喇叭才能听到

57
00:04:09,620 --> 00:04:12,600
在播放音乐的时候可以在不同的画面之间切换

58
00:04:16,900 --> 00:04:20,760
现在我们改成 Covox 播放试试

59
00:04:32,100 --> 00:04:34,160
对我来讲这个确实听起来好多了

60
00:04:35,000 --> 00:04:36,540
连我的猫都喜欢（猫：MDZZ）

61
00:04:39,200 --> 00:04:42,020
考虑到它还是完全依赖着 CPU

62
00:04:42,020 --> 00:04:46,699
而在 1986 年的 CPU 机能并不先进，那它意义在哪？

63
00:04:46,700 --> 00:04:50,960
这是个很好的问题，我也没有很好的回答

64
00:04:51,380 --> 00:04:56,060
我看到一本杂志上，有人就问一个为 Digitized Speech
编写的程序

65
00:04:56,060 --> 00:05:02,400
杂志回复道，它是和 BASIC 程序配合将单词数字化用的

66
00:05:03,680 --> 00:05:08,040
最早的能用它的游戏是 688 Attack Sub

67
00:05:08,040 --> 00:05:10,580
不过是 1989 年发布的

68
00:05:10,580 --> 00:05:15,640
我的猜测是，就像 C64 专属的 Covox 产品一样

69
00:05:15,640 --> 00:05:20,760
它们也有和原装配套的外设

70
00:05:20,770 --> 00:05:24,720
随着时间的推移，越来越多的游戏支持将 Covox 作为音频设备

71
00:05:24,720 --> 00:05:28,370
它最大的优势之一当然是价格

72
00:05:28,370 --> 00:05:33,370
在 1987 年，Adlib 音频合成器售价 195 刀

73
00:05:33,370 --> 00:05:36,490
多年之后的声霸卡售价 235 刀

74
00:05:36,490 --> 00:05:39,180
不过 Covox Speech Thing 只要 79 刀就能买到

75
00:05:39,980 --> 00:05:45,640
虽然价格便宜，但是问题是为了使其工作，编程会变得十分复杂

76
00:05:45,760 --> 00:05:52,020
基本上讲，任何要用到它的游戏就要求十分精确的定时流程

77
00:05:52,020 --> 00:05:55,350
这样就能同时玩游戏的时候产生音频

78
00:05:55,350 --> 00:06:00,840
此外，老电脑都很慢，它们没有更多的 CPU 周期来应对

79
00:06:01,080 --> 00:06:06,960
实际上要是去 Mobygames 看，已知只有 55 款游戏支持
Covox Speech Thing

80
00:06:08,920 --> 00:06:14,140
在 1991 年，一款竞争性的设备进入市场：
Disney Sound Source

81
00:06:14,340 --> 00:06:18,980
工作流程相似，但是价格十分疯狂，14刀

82
00:06:18,980 --> 00:06:22,540
甚至还和不同的游戏捆绑销售，比如说 The Rocketeer

83
00:06:22,550 --> 00:06:26,389
让我们打开看看怎么包装的

84
00:06:26,389 --> 00:06:28,650
很不幸的是这个包装之前没拆封过

85
00:06:28,650 --> 00:06:31,960
这是并口线缆

86
00:06:31,960 --> 00:06:34,500
这是扬声器

87
00:06:34,500 --> 00:06:35,900
坑

88
00:06:35,900 --> 00:06:37,800
盒子看起来都是空的

89
00:06:37,800 --> 00:06:40,600
他们把软盘藏在了这个小袋子里了

90
00:06:41,360 --> 00:06:42,900
还附带了一个轮盘

91
00:06:42,940 --> 00:06:45,200
我估计是一种防盗版措施

92
00:06:45,200 --> 00:06:47,900
在开始游戏之前会让你靠它寻找需要的信息

93
00:06:47,900 --> 00:06:51,590
我们来仔细看看这个设备

94
00:06:51,590 --> 00:06:55,990
这是它的核心，里面包含了 DAC

95
00:06:55,990 --> 00:06:58,650
还附带了一个母口，这样就还能连接打印机

96
00:06:58,650 --> 00:07:01,440
这样你就不会彻底把并口浪费在这上面

97
00:07:01,930 --> 00:07:05,960
这部分就是一个基本的放大器和内置扬声器

98
00:07:05,960 --> 00:07:10,380
你可以在上面看到米老鼠的轮廓，
这样就显然是迪士尼的产品了

99
00:07:10,860 --> 00:07:13,960
它靠电池功能，也是烦人

100
00:07:13,970 --> 00:07:17,729
不过它能在不被使用的时候自动断电

101
00:07:17,729 --> 00:07:19,629
它还有一个耳机接口

102
00:07:19,629 --> 00:07:24,710
问题是，Disney Sound Source 相比 Covox 有任何提升吗

103
00:07:24,710 --> 00:07:27,620
答案是看情况

104
00:07:27,620 --> 00:07:31,370
它有一个大优点和一个巨大的缺点

105
00:07:31,370 --> 00:07:35,140
最大的优点是它有一个小 FiFo 缓冲器

106
00:07:35,140 --> 00:07:36,780
让我解释一下它是如何工作的

107
00:07:36,860 --> 00:07:42,860
Covox 需要 CPU 精确地计算字节流传输时间，
需要消耗大量的 CPU 时间

108
00:07:43,620 --> 00:07:47,660
而 DSS 就有一个缓冲，能让 CPU 将信息直接发送进缓冲

109
00:07:47,660 --> 00:07:53,580
同时 DAC 也能同时将数字信号转成模拟信号流音频输出

110
00:07:53,720 --> 00:07:58,900
虽然没有声卡所使用的 DMA 好

111
00:07:58,900 --> 00:08:02,520
但是这个缓冲解除了 CPU 的和程序员的巨大负担

112
00:08:02,520 --> 00:08:05,479
因为计时不再重要

113
00:08:05,480 --> 00:08:11,860
结合了迪士尼更好的市场定位，意味着它能支持更多的游戏

114
00:08:12,240 --> 00:08:16,620
Mobygames 就列出了 131 款支持 Disney Sound Source 的游戏

115
00:08:16,620 --> 00:08:21,580
虽然相比 Ad-Lib 这样支持 1600 多款游戏还是数量很少

116
00:08:21,580 --> 00:08:23,660
但还是比 Covox 好得多

117
00:08:23,669 --> 00:08:27,259
那么我说的巨大的缺点是什么？

118
00:08:27,260 --> 00:08:33,500
Covox 的频率完全由你决定，毕竟是靠 CPU 来定时的

119
00:08:33,760 --> 00:08:37,960
这样你看到播放音频的时候采样率 44KHz

120
00:08:37,960 --> 00:08:42,820
然而 Disney Sound Source 完全靠缓冲决定输出频率

121
00:08:42,820 --> 00:08:45,560
就被固定到了 7KHz

122
00:08:45,570 --> 00:08:48,670
那么我们连接到它上面听听看

123
00:08:48,670 --> 00:08:51,959
我需要用其它支持 DSS 的 MOD 播放器

124
00:08:51,960 --> 00:08:52,959
来听听看吧

125
00:08:57,080 --> 00:08:58,040
低音不错

126
00:08:58,920 --> 00:09:00,540
高音就很糟糕

127
00:09:06,500 --> 00:09:07,860
再来听听 Covox 的

128
00:09:12,500 --> 00:09:13,660
然后是 Disney Sound Source

129
00:09:18,020 --> 00:09:22,440
和我的录音机对比的话，这个小扬声器也不怎么样

130
00:09:33,640 --> 00:09:39,400
所以这个 DSS 真是为了音效和语音设计的

131
00:09:39,400 --> 00:09:42,300
这些就是要整合进游戏或软件里的

132
00:09:42,300 --> 00:09:44,500
意义比播放实际的音乐要大

133
00:09:44,500 --> 00:09:47,920
而它播放音效和语音也不错

134
00:09:48,680 --> 00:09:54,700
最好的一点就是，任何有老 MS-DOS 电脑的人都买得起

135
00:09:54,700 --> 00:09:58,260
相比加装一个声霸卡或兼容卡要便宜得多

136
00:09:58,360 --> 00:10:04,140
对我来讲的优势是，我想用像这台这样的笔记本

137
00:10:04,140 --> 00:10:08,020
因为它没有任何形式的音频设备，也没有办法加装

138
00:10:08,300 --> 00:10:13,240
不过也得承认，只有 15% 的游戏支持它们

139
00:10:13,240 --> 00:10:19,700
首先我要给你展示一些能原生支持这些设备的游戏

140
00:10:19,700 --> 00:10:22,120
我要用这个笔记本来展示

141
00:10:22,120 --> 00:10:26,000
不用模拟器，我想给你看看真机听起来如何

142
00:10:26,040 --> 00:10:29,600
首先我想展示的是我一直都喜欢的《毁灭公爵 3D》

143
00:10:37,800 --> 00:10:43,320
正常情况下这个游戏在这个笔记本上不会有任何声音

144
00:10:43,320 --> 00:10:46,660
不过它支持外接 DSS 来产生音效

145
00:10:46,860 --> 00:10:50,380
不过没音乐的话，游戏玩起来也就更投入了

146
00:10:56,380 --> 00:10:59,100
接下来要展示的游戏是《波斯王子》

147
00:10:59,260 --> 00:11:02,500
正常情况下这个游戏只会配合笔记本自带的 PC 喇叭播放音效

148
00:11:03,180 --> 00:11:06,380
不过有了DSS，游戏玩起来就更有趣了

149
00:11:19,460 --> 00:11:24,720
《幻想弹珠台》实际上支持 Covox，听起来非常棒

150
00:11:38,260 --> 00:11:44,440
这些就是支持这两个设备的游戏的一些例子

151
00:11:44,460 --> 00:11:48,000
然后我发现有些游戏能支持其中一个或者另一个

152
00:11:48,000 --> 00:11:50,280
但大多数并不是两者都支持

153
00:11:50,290 --> 00:11:54,860
不过，我现在要给你展示一种方法能让更多游戏支持 Covox

154
00:11:54,860 --> 00:12:00,480
多年前，有人写了一个能在 Covox 上使用的
Tandy 3 声部音频模拟器

155
00:12:01,120 --> 00:12:04,260
加载到内存之后就可以开始游戏，
比如说《俄罗斯方块 Classic》

156
00:12:04,260 --> 00:12:08,620
我选择 VGA 音频后，然后可以看到第9个

157
00:12:08,620 --> 00:12:10,029
也就是 Tandy 3声部

158
00:12:10,029 --> 00:12:11,470
我就选择这个

159
00:12:11,470 --> 00:12:15,200
游戏就说没发现声卡，但是如果忽略这个消息的话它还是能用

160
00:12:28,580 --> 00:12:32,600
Tandy 音频系统听起来比较原始，但是选择这个

161
00:12:32,600 --> 00:12:36,640
能给 CPU 带来更低的负担去模拟，而且也还不错

162
00:12:36,760 --> 00:12:40,120
这就比用 PC 喇叭玩有趣多了

163
00:12:46,480 --> 00:12:49,260
这就是使用 Tandy 音效的《Populous》

164
00:12:57,780 --> 00:13:00,260
这是使用 Tandy 音效的 Ultima 6

165
00:13:09,060 --> 00:13:12,520
Ultima 还是会通过 PC 喇叭播放音效

166
00:13:12,520 --> 00:13:14,920
配合其它声卡也是如此

167
00:13:14,920 --> 00:13:18,199
也就是只用声卡播放音乐

168
00:13:18,200 --> 00:13:21,480
由于我这里只录制的音乐，所以你听不到任何音效

169
00:13:35,980 --> 00:13:40,600
如果去 Mobygames 看的话，有 432 款游戏支持 Tandy 音效

170
00:13:40,600 --> 00:13:43,660
这样就大大扩充了游戏的数量

171
00:13:43,660 --> 00:13:50,620
我用 Tandy 模拟器试了很多软件，其中一半不能用

172
00:13:50,620 --> 00:13:54,520
绝大多数原因都是它们检测不到 Tandy 声卡的存在

173
00:13:54,840 --> 00:14:04,080
原因是很多老游戏通过检测电脑的 BIOS 字符串中是否有
Tandy 来判断是否是 Tandy 电脑

174
00:14:04,220 --> 00:14:08,060
因为只有 Tandy 电脑才有 Tandy 声卡

175
00:14:08,060 --> 00:14:10,520
所以这是一个很简单的方法

176
00:14:10,680 --> 00:14:16,780
而模拟器只模拟硬件，不改变 BIOS 编码

177
00:14:16,780 --> 00:14:21,200
很多游戏就是无法检测而失败

178
00:14:21,200 --> 00:14:23,339
也没有简单的方法解决

179
00:14:23,340 --> 00:14:27,980
即便如此，原生支持的游戏加上配合 Tandy 模拟器工作的游戏

180
00:14:27,980 --> 00:14:32,720
使用这样的简单设备能选择的游戏的数量还是很可观的

181
00:14:32,880 --> 00:14:35,160
我还有一点没给你展示

182
00:14:35,160 --> 00:14:39,440
不管你是否相信，几乎所有的 Sierra 开发的探险游戏也能用

183
00:14:39,440 --> 00:14:44,029
有人就开发了为 Sierra 游戏准备的新的声卡驱动

184
00:14:44,029 --> 00:14:46,400
就能支持特殊的4声部模式

185
00:14:49,880 --> 00:14:54,080
听起来也还好，就像 Tandy 模拟器那样

186
00:15:00,120 --> 00:15:02,960
不过要记住这些声音是软件实时产生的

187
00:15:02,960 --> 00:15:04,720
所以听起来不怎么样

188
00:15:04,720 --> 00:15:07,380
至少我能带音乐玩这些游戏了

189
00:15:11,460 --> 00:15:17,320
正常情况下有的一点音乐都没有的游戏
只会靠 PC 喇叭产生音效

190
00:15:23,440 --> 00:15:27,259
那么原生支持、Tandy 模拟器和所有 Sierra 游戏加起来

191
00:15:27,260 --> 00:15:31,260
已经有上百款能在这个 486 笔记本上带音频运行的游戏

192
00:15:31,260 --> 00:15:34,240
虽说不支持任何形式的声卡

193
00:15:34,240 --> 00:15:37,280
这就太酷了，如果你像我一样收了老笔记本

194
00:15:37,280 --> 00:15:44,320
这些廉价的设备就肯定能给你的笔记本带来一些声音

195
00:15:44,920 --> 00:15:49,800
我会在描述上附上购买地址，我也不靠这个赚钱

196
00:15:50,020 --> 00:15:54,220
不过我想很多古董电子爱好者一定会喜欢入手这类设备

197
00:15:54,460 --> 00:15:58,960
那么这一集到这里就结束了，我们下次再见

