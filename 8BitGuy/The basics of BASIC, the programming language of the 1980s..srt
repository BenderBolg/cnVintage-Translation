1
00:00:09,820 --> 00:00:11,880
欢迎观看新一集的The 8-Bit Guy

2
00:00:11,880 --> 00:00:16,160
今天我们要聊一聊BASIC 属于80年代的编程语言

3
00:00:16,640 --> 00:00:22,340
虽然BASIC实在1964年由Thomas Kurtz在Dartmouth college发明的

4
00:00:22,340 --> 00:00:26,340
但是那些电脑都不能被称为个人电脑

5
00:00:26,960 --> 00:00:31,340
后来Bill Gates和Paul Allen开了一家叫微软的创业公司

6
00:00:31,359 --> 00:00:36,140
他们把BASIC移植到了70年代的一些家用电脑上

7
00:00:36,140 --> 00:00:41,740
这样才终于在80年代有了爆发式的增长

8
00:00:41,740 --> 00:00:46,100
当你看这些电脑的时候 会发现他们很不一样

9
00:00:46,100 --> 00:00:49,320
硬件 软件 用户界面都不一样

10
00:00:49,320 --> 00:00:53,200
但是有一点是一样的 他们都运行BASIC

11
00:00:53,460 --> 00:00:58,380
BASIC是家用计算机革命中非常棒的一个“均衡器”

12
00:00:58,900 --> 00:01:01,340
早期的家用电脑是互不兼容的

13
00:01:01,480 --> 00:01:06,280
你不能拿一个Apple II用的二进制然后放在PC上运行

14
00:01:06,280 --> 00:01:13,580
或者是Commodore 64，Atari 8-Bit系统，TI 99/4a 都是不同的

15
00:01:14,300 --> 00:01:16,020
除了BASIC

16
00:01:16,800 --> 00:01:22,300
在基础的家用电脑说明书里就有教如何使用BASIC

17
00:01:22,600 --> 00:01:24,020
在学校里也教BASIC

18
00:01:24,360 --> 00:01:28,260
因为这是这些系统上共通的语言

19
00:01:28,260 --> 00:01:32,740
你可以拿在一个系统上学到的东西 放到另外一个系统上用

20
00:01:33,680 --> 00:01:38,440
我最喜欢的节目之一 飞出个未来 经常就喜欢玩这类梗

21
00:01:38,440 --> 00:01:43,920
比如Bender的CPU是6502 也就是许多80年代家用电脑使用的CPU

22
00:01:43,920 --> 00:01:46,740
你也可以在各种地方看到BASIC的编号方式

23
00:01:46,740 --> 00:01:52,460
从home-sweet-home海报 一直到Robotology教堂的创始原则

24
00:01:52,460 --> 00:01:57,700
很明显 如果你SIN 然后就会移到 20这行 然后就得下地狱

25
00:01:58,160 --> 00:02:00,990
另外Kif的holoshed程序也是用BASIC写的

26
00:02:01,260 --> 00:02:03,480
来自数百万行BASIC代码

27
00:02:04,100 --> 00:02:07,400
这集视频我不会教各位如何写BASIC代码

28
00:02:07,400 --> 00:02:09,060
这会很无聊的

29
00:02:09,160 --> 00:02:13,940
但是我还是想先讲下 为什么这个是BASIC代码

30
00:02:14,080 --> 00:02:17,220
因为它使用了以10为间隔的行号

31
00:02:17,500 --> 00:02:20,580
在BASIC中 每一行代码以一个数字开头

32
00:02:20,780 --> 00:02:24,820
通常都从10开始 接着是20 以此类推

33
00:02:25,040 --> 00:02:31,380
这么做的原因就是 当时的电脑并没有内置什么文本编辑器或者字处理器

34
00:02:31,820 --> 00:02:35,700
尽管通常可以回去修改一行的内容

35
00:02:35,700 --> 00:02:38,860
但是经常也需要插入行

36
00:02:39,120 --> 00:02:42,560
所以留了空 你就可以打入比如行号15

37
00:02:42,560 --> 00:02:44,540
这样就可以插入代码了

38
00:02:45,000 --> 00:02:49,020
接下来 我想展示一本书 101个BASIC电脑游戏

39
00:02:49,020 --> 00:02:53,800
这本书是1978年出版的 算是计算机革命刚刚开始的时候

40
00:02:54,080 --> 00:02:55,940
这个书还是挺有历史意义的

41
00:02:55,940 --> 00:03:00,020
因为这是第一本销量破百万的计算机书籍

42
00:03:00,500 --> 00:03:04,400
我小时候第一次见到BASIC的时候

43
00:03:04,400 --> 00:03:11,820
我大概7 8岁的样子 本地的图书馆在儿童书籍里面 有个技术类

44
00:03:11,820 --> 00:03:15,200
我看见了这本书

45
00:03:15,420 --> 00:03:18,020
BASIC电脑游戏 微机版

46
00:03:18,030 --> 00:03:22,720
101个适合在家用电脑上玩的游戏 来自创意计算（Creative Computing）

47
00:03:22,720 --> 00:03:25,300
这本书是1978年10月出版的

48
00:03:25,660 --> 00:03:31,720
90年代早期的时候图书馆里还有不少 我就拿回家了

49
00:03:31,720 --> 00:03:36,360
里面有各种各样看起来很酷的游戏

50
00:03:38,240 --> 00:03:40,600
当然都是要自己打进去的

51
00:03:40,600 --> 00:03:44,360
我把这些指令打进我的Packard Bell （MS-DOS）电脑

52
00:03:44,640 --> 00:03:46,240
然后一个都不能用

53
00:03:46,460 --> 00:03:51,800
当然现在我知道了 那是一台DOS电脑

54
00:03:51,820 --> 00:03:54,379
并没有运行Microsoft BASIC

55
00:03:54,660 --> 00:03:57,480
我是最近才拿到这本书的

56
00:03:57,480 --> 00:04:04,120
里面大部分的游戏都是面向TRS-80的 或者Commodore PET

57
00:04:04,120 --> 00:04:08,180
或者是Apple II以及一些早期 如Altair的能运行BASIC的CP/M机器

58
00:04:08,720 --> 00:04:12,280
我决定打一个进去看看要花多长时间

59
00:04:13,260 --> 00:04:15,720
我翻了翻书 决定试试这个Hangman

60
00:04:15,920 --> 00:04:18,180
这个其实还算是一个比较短的游戏

61
00:04:18,800 --> 00:04:21,540
我用了Apple II 因为这个也是他的目标机型之一

62
00:04:21,960 --> 00:04:25,080
我开了一个秒表 看看要花多久

63
00:04:26,380 --> 00:04:28,440
接着就开始打了

64
00:04:28,720 --> 00:04:31,280
我记得小时候就做过这种事情 感觉永远都打不完

65
00:04:31,289 --> 00:04:33,789
我觉得现在我可能能打得快一点

66
00:04:33,789 --> 00:04:37,000
然而这个和打口语不一样

67
00:04:37,000 --> 00:04:39,220
里面有大量的符号、数字

68
00:04:39,220 --> 00:04:41,499
所以会比你想象的要慢

69
00:04:41,860 --> 00:04:43,860
时间不停流逝

70
00:04:57,080 --> 00:05:00,140
终于完成了 秒表表示

71
00:05:00,140 --> 00:05:00,820
天

72
00:05:00,820 --> 00:05:02,020
47分钟

73
00:05:03,180 --> 00:05:06,000
LIST一下就能看到我实际上打了多少

74
00:05:10,200 --> 00:05:11,500
来试一试吧

75
00:05:12,400 --> 00:05:14,540
看起来这个程序需要80列的显示器

76
00:05:14,740 --> 00:05:16,160
无论如何 看看能不能玩

77
00:05:16,700 --> 00:05:19,420
试试E 我猜到一个字母

78
00:05:20,620 --> 00:05:24,279
注意到它每次都重绘整个屏幕

79
00:05:24,280 --> 00:05:28,920
因为BAISC并没有标准的控制光标的语句

80
00:05:29,400 --> 00:05:32,640
所以这些游戏都得假设自己是在老的电传打字机上运行

81
00:05:34,280 --> 00:05:36,220
出语法错误了

82
00:05:36,220 --> 00:05:40,300
其实如果整个程序打下来毫无错误才是奇怪

83
00:05:40,300 --> 00:05:43,650
检查一下520行看看是什么问题

84
00:05:44,040 --> 00:05:44,640
啊……

85
00:05:44,650 --> 00:05:45,699
我知道了

86
00:05:45,700 --> 00:05:47,380
重打这一行

87
00:05:48,340 --> 00:05:50,640
现在看起来游戏能正常运行了

88
00:05:51,320 --> 00:05:56,900
一件事情就是 这本书里的游戏都是不带图形的

89
00:05:56,900 --> 00:05:58,979
全是基于文本的游戏

90
00:05:58,980 --> 00:06:03,080
尽管在21世纪看来有些无聊

91
00:06:03,080 --> 00:06:06,820
但是在1978年并不是个什么问题

92
00:06:06,820 --> 00:06:10,180
因为大部分的电脑也就不支持图形

93
00:06:10,560 --> 00:06:15,700
尽管有像Apple II这样的支持图形的电脑

94
00:06:16,000 --> 00:06:19,639
这些指令都是不通用的

95
00:06:19,639 --> 00:06:24,089
所以如果要出版一本适用于多种机器的BASIC程序书

96
00:06:24,089 --> 00:06:27,900
还是只能选择文字游戏

97
00:06:28,780 --> 00:06:33,160
尽管这些游戏在21世纪都很难被称为有趣 但是

98
00:06:33,160 --> 00:06:36,460
在这本书更多代表的是

99
00:06:36,460 --> 00:06:40,900
70年代末期的软件情况

100
00:06:41,040 --> 00:06:46,860
也即是说 你不能直接去K-Mart或者Target（超市）直接买到游戏

101
00:06:46,940 --> 00:06:49,800
这种事情直到80年代才出现

102
00:06:50,260 --> 00:06:54,040
所以70年代末期的电脑制造商

103
00:06:54,040 --> 00:06:59,380
都是假设用户会自己用BASIC写程序

104
00:06:59,380 --> 00:07:05,820
或者会从书或者杂志里面找程序自己打进去 BASIC就很合适了

105
00:07:05,920 --> 00:07:09,740
以前很常见的一个情况就是 你能买到一本计算机杂志

106
00:07:09,880 --> 00:07:14,440
里面会有两三个你可以打进电脑玩的游戏

107
00:07:14,620 --> 00:07:21,160
里面可能会有10页的BASIC 有时是汇编

108
00:07:21,160 --> 00:07:25,260
然后你就坐着把它全部打进电脑 还是挺有趣的

109
00:07:25,400 --> 00:07:28,700
因为在最后 你就可以玩游戏了

110
00:07:29,480 --> 00:07:33,440
要知道 在当时 纸头还比磁盘便宜呢

111
00:07:33,440 --> 00:07:35,340
时过境迁啊

112
00:07:36,120 --> 00:07:40,140
我还记得每个月等着杂志来

113
00:07:40,440 --> 00:07:42,780
然后我会从头到尾读完

114
00:07:43,020 --> 00:07:48,880
第二天拿去学校的机房 里面有大约10台Apple II

115
00:07:49,040 --> 00:07:51,360
我就把里面的BASIC程序打进去

116
00:07:51,640 --> 00:07:57,020
可以看这类程序 然后了解如何制作游戏

117
00:07:57,020 --> 00:07:59,340
程序是怎么运行的

118
00:07:59,340 --> 00:08:01,560
当然都只是非常“BASIC”（基础）的东西

119
00:08:01,600 --> 00:08:02,680
但是，嗯

120
00:08:02,700 --> 00:08:08,500
一个打程序的优点就是

121
00:08:08,500 --> 00:08:12,499
你在打的时候 他们其实就相当于在教你BASIC了

122
00:08:12,499 --> 00:08:14,709
BASIC语言还是很简单的

123
00:08:14,709 --> 00:08:16,899
你有变量 可以进行操作

124
00:08:16,900 --> 00:08:19,980
有时会有一些输入输出的命令

125
00:08:19,980 --> 00:08:22,900
比如切换屏幕 显示图形等等

126
00:08:23,280 --> 00:08:26,820
在打程序的时候 自己就学会了这个语言了

127
00:08:27,380 --> 00:08:29,400
有人前几天给了我这些东西

128
00:08:29,400 --> 00:08:35,960
我觉得想法很棒 这种BASIC的用法我之前是没见过的

129
00:08:36,160 --> 00:08:39,000
这些被标题是 微探险

130
00:08:39,380 --> 00:08:46,020
这些就是一些小说 写法也就像一般的小说一样

131
00:08:46,060 --> 00:08:50,280
但是里面有些地方

132
00:08:50,580 --> 00:08:51,680
Oh man

133
00:08:51,680 --> 00:08:52,880
发生了一些事情

134
00:08:52,880 --> 00:08:58,760
想知道发生了什么 输入以下的BASIC程序 然后就会……

135
00:08:58,760 --> 00:09:01,080
有些程序是不能用的

136
00:09:01,080 --> 00:09:06,670
这里有个列表 IBM Apple RadioShack Commodore TI和Atari

137
00:09:06,670 --> 00:09:08,950
但是大部分的程序都是能用的

138
00:09:08,950 --> 00:09:11,660
可以看到这里有个列表

139
00:09:11,660 --> 00:09:13,460
如果你有合适的机器的话

140
00:09:13,460 --> 00:09:18,640
就能在一点互动和图形下看见之后会发生什么

141
00:09:18,640 --> 00:09:20,220
我觉得想法还是很不错的

142
00:09:21,680 --> 00:09:24,820
Clint发了我一些书的照片 我就打印出来了

143
00:09:24,820 --> 00:09:27,080
打进去看看是做什么用的

144
00:09:27,200 --> 00:09:31,500
我决定用我的Radio Shack 彩色电脑 因为是在支持列表上的

145
00:09:31,500 --> 00:09:34,020
事实上对着照片打还更方便

146
00:09:34,020 --> 00:09:36,380
因为不用在打的时候按着书

147
00:09:50,860 --> 00:09:54,840
显然这个程序是用来加解密一些密码的

148
00:09:55,120 --> 00:09:57,540
如果不看书对我来说是没有什么大用

149
00:09:57,680 --> 00:10:01,030
这个只是展示下BASIC有多流行

150
00:10:01,030 --> 00:10:04,640
这是6和7 我不知道整个系列有多少

151
00:10:04,640 --> 00:10:06,320
但是至少说明有这个东西

152
00:10:06,720 --> 00:10:09,800
另外我想展示的是这本旧的几何书

153
00:10:09,800 --> 00:10:14,520
我花了很长时间找这本书 但是我觉得还是很有必要展示一下

154
00:10:14,760 --> 00:10:17,020
大部分这类书我觉得都被销毁掉了

155
00:10:17,020 --> 00:10:23,340
因为不像大学 高中生通常自己都没有书 这些书最终都还给了学校

156
00:10:23,340 --> 00:10:26,240
要么就是销毁掉了 要么就是退回给了出版商

157
00:10:26,240 --> 00:10:35,440
但是对于我来说 我用过的从初中到高中毕业的每一本数学书

158
00:10:35,840 --> 00:10:37,620
里面都有BASIC

159
00:10:37,620 --> 00:10:42,160
所有教室里都有一两台Apple II

160
00:10:42,640 --> 00:10:46,653
在你学会这章的数学内容后 你可以用一台电脑

161
00:10:46,653 --> 00:10:51,030
打入这个BASIC程序 尝试使用刚刚学到的概念

162
00:10:51,030 --> 00:10:56,770
可以看到这本书先是在1990年借给了一个叫Brad Carter的人

163
00:10:56,770 --> 00:11:01,050
这个可能是最后几本带有这种BASIC代码的书了

164
00:11:01,050 --> 00:11:08,860
在80年代早期，几乎所有的个人电脑厂商 包括Apple 都转向了Microsoft BASIC

165
00:11:09,280 --> 00:11:13,480
尽管现在提到微软 大家想到的都是Windows或者Office

166
00:11:13,960 --> 00:11:19,140
但是在以前 几乎所有的个人电脑 都在BASIC某个地方显示着微软logo

167
00:11:19,880 --> 00:11:24,920
如果你拆开一台老的苹果电脑 比如这里有一台老的Apple IIgs

168
00:11:24,920 --> 00:11:28,500
里面会有一片标着Microsoft的芯片

169
00:11:28,500 --> 00:11:32,040
狗和猫睡在一起！

170
00:11:32,040 --> 00:11:33,560
真是疯了！

171
00:11:33,560 --> 00:11:35,420
只是因为他们有最流行的BASIC

172
00:11:35,420 --> 00:11:38,360
还有一个关于C64的有趣的故事

173
00:11:38,660 --> 00:11:40,280
是怎么样的呢……

174
00:11:41,040 --> 00:11:46,200
Jack Tramiel从Microsoft拿了给PET用的BASIC授权

175
00:11:46,200 --> 00:11:50,020
然后他之后的电脑都没有动过这个

176
00:11:50,020 --> 00:11:55,840
于是一份授权他拿着卖了几百万台电脑

177
00:11:56,280 --> 00:11:58,060
人们经常开微软的玩笑

178
00:11:58,480 --> 00:12:00,280
以前是这样，现在也是

179
00:12:00,640 --> 00:12:04,520
但是还是很难否认他们BASIC的贡献

180
00:12:04,680 --> 00:12:09,280
在所有的个人电脑上预装

181
00:12:09,280 --> 00:12:10,480
这还是非常惊人的

182
00:12:10,760 --> 00:12:13,860
你觉得可能BASIC非常通用

183
00:12:13,860 --> 00:12:16,120
所有的机器都在运行微软BASIC对吧

184
00:12:16,820 --> 00:12:22,000
然而 所有关于图形 声音 还是磁盘操作的命令都是专用的

185
00:12:22,240 --> 00:12:24,220
这种方言上的差异还是很有趣的

186
00:12:24,220 --> 00:12:27,740
就像学习一种语言的不同口音

187
00:12:28,180 --> 00:12:35,180
你可以学习南美英语 西北美英语

188
00:12:35,180 --> 00:12:38,010
英式英语 苏格兰英语

189
00:12:38,010 --> 00:12:42,140
另外不单单是机器间的语言有点差异

190
00:12:42,140 --> 00:12:45,040
每个机器也有各自的特点

191
00:12:45,040 --> 00:12:47,540
BASIC不单单是一种语言

192
00:12:47,540 --> 00:12:51,780
而且也是整个操作系统和用户界面

193
00:12:52,240 --> 00:12:57,240
比如说在C64上 你有一个磁带或者软盘的游戏

194
00:12:57,240 --> 00:13:01,760
你可以把游戏放进驱动器 但是还是需要在BASIC里面输入命令载入

195
00:13:02,200 --> 00:13:06,000
当然 大部分的游戏盘上都写着载入的命令

196
00:13:06,000 --> 00:13:12,520
对于许多Commodore用户来说 这是他们唯一知道的一句BASIC命令

197
00:13:12,800 --> 00:13:16,240
他们甚至不知道这是什么意思 只知道这样能打开游戏

198
00:13:16,480 --> 00:13:20,450
但是其它机器载入磁盘游戏的方法就完全不一样了

199
00:13:20,960 --> 00:13:25,920
BASIC的一个特点也是 没有一种统一的BASIC

200
00:13:25,930 --> 00:13:30,111
在不同的硬件之间 对于BASIC的解释也是不一样的

201
00:13:30,120 --> 00:13:32,620
这是一开始让我迷惑的一点

202
00:13:33,260 --> 00:13:36,220
而且编辑器也很不一样

203
00:13:36,220 --> 00:13:41,200
比如说Apple II的BASIC在输入的时候会有一个小光标

204
00:13:41,200 --> 00:13:44,900
但是如果打错了不能按退格键

205
00:13:45,100 --> 00:13:48,430
它不会修正你的错误 只会把事情弄得更糟

206
00:13:48,430 --> 00:13:51,240
你得用光标返回去

207
00:13:51,500 --> 00:13:54,780
而Commodore BASIC就有一个非常友好的编辑器

208
00:13:55,120 --> 00:13:57,360
退格键的作用就和设想的一样

209
00:13:57,360 --> 00:14:02,040
如果你想的话，完全可以把光标退回去修改你的程序

210
00:14:02,300 --> 00:14:05,780
尽管光标键比较奇怪 只有两个

211
00:14:06,100 --> 00:14:09,380
一个负责上下 一个负责左右

212
00:14:09,390 --> 00:14:13,420
你必须要使用Shift键来控制光标的方向

213
00:14:13,420 --> 00:14:16,300
很奇怪 但是一段时间后就会适应

214
00:14:17,060 --> 00:14:19,420
在苹果上 如果你要让光标在屏幕上移动

215
00:14:19,420 --> 00:14:24,220
你需要按下Esc然后按一些神秘字母（vi既视感）

216
00:14:26,280 --> 00:14:30,860
Commodore系统的另外一个功能是引号

217
00:14:30,860 --> 00:14:34,380
当你打了引号之后 比如在PRINT语句中

218
00:14:34,380 --> 00:14:38,220
他会自动使用特殊符号来表示所有你按下的命令

219
00:14:38,280 --> 00:14:44,230
比如说我可以按下home键 打个字母 向下移动3个单位

220
00:14:44,230 --> 00:14:49,600
向右移动3个单位 改变下颜色 再打个单词  打上引号结束引用

221
00:14:49,600 --> 00:14:53,540
这样当我运行程序的时候 他就会自动按照这个顺序执行指令

222
00:14:53,540 --> 00:14:55,330
这个确实相当有用

223
00:14:55,900 --> 00:15:01,320
Commodore BASIC确实有一个非常方便的屏幕编辑器 还有许多其它有用的功能

224
00:15:01,320 --> 00:15:05,080
但是也有一个严重的缺点 特别是VIC20和C64

225
00:15:05,080 --> 00:15:07,420
也就是他们销量最好的机型

226
00:15:07,680 --> 00:15:13,260
问题就是 BASIC没有內建任何图形、声音或者磁盘操作指令

227
00:15:13,279 --> 00:15:15,890
他们确实有内置载入和保存指令 但也就仅此而已了

228
00:15:15,890 --> 00:15:19,740
像Apple II可以直接打CATALOG读取磁盘目录

229
00:15:19,740 --> 00:15:25,460
Commodore的方法很奇怪 你需要从磁盘读取一个叫美金符号的软件

230
00:15:27,080 --> 00:15:30,790
然后软盘驱动器自己会生成一个短BASIC程序

231
00:15:30,790 --> 00:15:32,670
然后送回给电脑

232
00:15:32,670 --> 00:15:36,380
所以你可以LIST这个程序 看到磁盘内的内容

233
00:15:36,980 --> 00:15:40,571
问题就是如果你正在打一个BASIC程序

234
00:15:40,580 --> 00:15:44,360
那么你白打了 因为东西都被这个目录列表覆盖了

235
00:15:45,140 --> 00:15:49,920
这个问题基本上都是通过外置卡带解决的 比如EPYX Fastload （发音应该同Epics而非读字母）

236
00:15:50,400 --> 00:15:55,060
除了能够大幅加快软盘的读取速度 还增加了很多功能

237
00:15:55,120 --> 00:15:59,460
比如只打一个美金符号直接获取目录内容 而不会覆盖已有程序

238
00:15:59,640 --> 00:16:02,910
还有一个带有各种工具的菜单

239
00:16:02,910 --> 00:16:07,260
这个卡带相当流行 每个Commodore重度用户都会有一张

240
00:16:07,260 --> 00:16:10,260
但是这也没能解决图形指令的问题

241
00:16:10,480 --> 00:16:13,280
根据说明书 如果你需要图形相关的功能

242
00:16:13,280 --> 00:16:17,480
你需要各种POKE PEEK指令

243
00:16:17,480 --> 00:16:19,840
直接操作图形芯片的寄存器

244
00:16:20,060 --> 00:16:24,280
速度慢 而且也很难理解发生了什么 （速度慢是指用BASIC多次读写寄存器不如封装在一个库函数里快）

245
00:16:24,280 --> 00:16:28,620
如果你想在Apple II的屏幕上画一个正弦波 没问题

246
00:16:28,620 --> 00:16:32,980
几行BASIC代码就能完成

247
00:16:33,580 --> 00:16:36,180
对于VIC-20或者C64大概就是一个噩梦了

248
00:16:36,560 --> 00:16:40,260
但是其实还有类似于Super Expander这类的卡带

249
00:16:40,260 --> 00:16:42,380
可以给机器增加不少的命令

250
00:16:42,640 --> 00:16:47,760
而在C64上 Simon‘s BASIC也十分流行 用法也类似

251
00:16:47,940 --> 00:16:53,020
说到卡带的话 最初的Atari电脑并没有内置BASIC

252
00:16:53,020 --> 00:16:55,740
对于这个时间节点来说算是相当奇怪的

253
00:16:56,140 --> 00:16:59,460
如果你打开电脑 会就打开一个记事本

254
00:16:59,660 --> 00:17:03,480
这玩意基本没用 甚至都不能保存

255
00:17:03,760 --> 00:17:06,779
然而确实附送了一张BASIC卡带

256
00:17:06,779 --> 00:17:09,510
你把BASIC插入这个左槽

257
00:17:09,510 --> 00:17:10,900
右槽完全没有用

258
00:17:11,260 --> 00:17:14,780
否则开机是没有BASIC的

259
00:17:14,780 --> 00:17:20,549
如果你要玩一个大一点的游戏 比如Ghostbusters或者Rescue on Fractalus

260
00:17:20,549 --> 00:17:25,449
它映射了8K的内存 所以如果你插着BASIC卡带 你就少了8K的游戏

261
00:17:25,449 --> 00:17:28,480
大一点的汇编游戏就放不进内存了

262
00:17:28,480 --> 00:17:33,340
所以你得把BASIC卡带拔出来才能玩这些游戏

263
00:17:33,340 --> 00:17:39,160
晚期的机型如800XL 包括之后的机型 都内置了BASIC

264
00:17:39,520 --> 00:17:42,560
这个很酷 因为就在那里

265
00:17:42,560 --> 00:17:49,320
你可以打开电脑 然后就可以开始写代码了 不需要其它任何工作

266
00:17:49,320 --> 00:17:52,940
不需要像在IBM PC上一样启动到别的什么东西里面

267
00:17:52,940 --> 00:17:54,620
这个确实很吸引我

268
00:17:54,900 --> 00:17:59,320
而且 不单单是立即可用 你甚至不一定要写程序

269
00:17:59,320 --> 00:18:02,590
是的 你可以直接在提示符打命令

270
00:18:02,590 --> 00:18:07,279
比如说要进行数学运算 直接打PRINT加上表达式

271
00:18:07,280 --> 00:18:08,860
它就会显示结果

272
00:18:09,060 --> 00:18:12,560
也可以使用循环一类的东西而不需要输入程序

273
00:18:13,560 --> 00:18:14,520
我的意思就是 确实很方便

274
00:18:14,529 --> 00:18:17,850
BASIC有一点就是非常非常容易上手

275
00:18:17,850 --> 00:18:22,040
很符合逻辑的一点就是 你可以直接看代码

276
00:18:22,040 --> 00:18:26,679
只要搞明白了那些POKE指令 一切都很清楚

277
00:18:26,679 --> 00:18:28,029
就可以直接读代码

278
00:18:28,029 --> 00:18:29,029
至少我可以

279
00:18:29,029 --> 00:18:32,860
我觉得还是很有趣的 我很喜欢这点

280
00:18:33,480 --> 00:18:40,820
我已经展示了很多 设计上充分考虑了可移植性 能在各种电脑上运行的程序

281
00:18:41,260 --> 00:18:45,169
但是如果你想要给一个特定平台写代码

282
00:18:45,169 --> 00:18:46,920
能不能做得更好呢？

283
00:18:47,780 --> 00:18:51,780
Steve Wozniak是最早向大家展示这一点的人之一

284
00:18:51,960 --> 00:18:56,160
他不单单是写了自己的BASIC，叫做Integer BASIC

285
00:18:56,180 --> 00:18:57,780
专门用于制作游戏

286
00:18:58,060 --> 00:19:01,649
在1976年写了自己的游戏 Little Brick Out

287
00:19:01,649 --> 00:19:03,889
他说便携花了30分钟时间

288
00:19:03,889 --> 00:19:06,149
这也就是BASIC的力量

289
00:19:06,149 --> 00:19:08,120
编写程序非常快

290
00:19:08,740 --> 00:19:12,940
BASIC，全称是 初学者用 全功能 符号 指令 码

291
00:19:13,400 --> 00:19:20,000
运行速度其实不那么快 现代的类比大概就是Python了

292
00:19:20,000 --> 00:19:24,860
Python也是一个解释执行的语言

293
00:19:24,860 --> 00:19:26,360
而不是编译执行

294
00:19:26,360 --> 00:19:30,179
所有的语言逻辑都是实时完成的

295
00:19:30,180 --> 00:19:33,060
然而如今的电脑速度足够快

296
00:19:33,060 --> 00:19:36,240
所以速度的差距就不那么容易察觉到

297
00:19:36,840 --> 00:19:39,720
所以BASIC学习简单 编程快速

298
00:19:39,720 --> 00:19:43,600
但是在这些8Bit机上也有一些缺点

299
00:19:43,620 --> 00:19:45,420
特别是速度

300
00:19:45,429 --> 00:19:48,309
但是 这也是当成是一种挑战

301
00:19:48,309 --> 00:19:50,159
让我一直回来用BASIC写东西

302
00:19:50,160 --> 00:19:53,440
因为有趣的一点就是 尝试在这些限制下能做到什么样的水平

303
00:19:54,400 --> 00:19:59,600
比如说几年前我决定在Commodore上用BASIC写一个俄罗斯方块

304
00:19:59,980 --> 00:20:01,860
程序并不是很长

305
00:20:01,880 --> 00:20:04,360
然而我还是花了一天才写完

306
00:20:04,940 --> 00:20:08,520
第一版只花了一个小时 但是速度非常慢

307
00:20:08,520 --> 00:20:09,780
基本不能玩

308
00:20:10,300 --> 00:20:13,540
所以这天剩下的时间我都在尝试优化代码

309
00:20:13,540 --> 00:20:15,090
最后成功了

310
00:20:15,090 --> 00:20:17,220
所以现在你可以玩BASIC的俄罗斯方块了

311
00:20:18,420 --> 00:20:22,970
除此之外还有一些使用BASIC编写的商业游戏 比如Sword of Fargoal

312
00:20:22,970 --> 00:20:24,880
还有一个叫Telengard

313
00:20:25,680 --> 00:20:30,220
我想给大家演示一下BASIC和机器语言之间的速度差距

314
00:20:30,260 --> 00:20:32,820
一个很直白的例子

315
00:20:33,400 --> 00:20:38,120
我就写个程序 在屏幕上显示256个字符

316
00:20:38,120 --> 00:20:40,040
直接写入屏幕内存

317
00:20:40,240 --> 00:20:43,220
你可以看到需要几秒钟的时间

318
00:20:43,880 --> 00:20:47,920
接下来同样的程序，用汇编写

319
00:20:50,540 --> 00:20:53,080
Duang 速度快到根本看不出绘图过程

320
00:20:54,960 --> 00:20:58,200
然而除了直接买一台更快的电脑

321
00:20:58,200 --> 00:21:01,060
BASIC也是可以通过一定手段加速的

322
00:21:01,660 --> 00:21:03,380
一个选项就是使用编译器

323
00:21:03,389 --> 00:21:07,399
Blitz编译器就可以编译你的BASIC程序

324
00:21:07,400 --> 00:21:12,040
但是并不是编译成机器码 而是编译成字节码

325
00:21:13,100 --> 00:21:16,420
可以看到还是比原先的BASIC要快不少

326
00:21:17,140 --> 00:21:21,440
甚至于 在编译了俄罗斯方块后 因为速度太快反而不能玩了

327
00:21:21,760 --> 00:21:22,600
但是不要被骗了

328
00:21:22,600 --> 00:21:26,500
这些编译后的BASIC程序 速度也只是大约原先的速度翻倍

329
00:21:26,660 --> 00:21:29,779
但是仍然只有机器码程序速度的零头

330
00:21:29,779 --> 00:21:33,919
但是你仍然可以享受BASIC编程带来的便利性

331
00:21:33,920 --> 00:21:35,830
然后获得一点点的速度提升

332
00:21:36,240 --> 00:21:37,360
我喜欢BASIC

333
00:21:38,300 --> 00:21:45,460
并不是什么非常快的东西

334
00:21:45,460 --> 00:21:52,860
其实它有很多限制 这也是我觉得它让人着迷的原因

335
00:21:52,880 --> 00:21:58,080
每次我拿到一台新的旧电脑 我都会先试一试BASIC

336
00:21:58,860 --> 00:22:00,399
所以我怀念BASIC的哪一点呢

337
00:22:01,200 --> 00:22:06,720
我的意思是 你现在有一辆法拉利 然后别人问你怀念旧福特的哪一点

338
00:22:06,720 --> 00:22:08,330
除了便宜之外

339
00:22:08,330 --> 00:22:12,820
我觉得有一点就是开发很方便

340
00:22:12,820 --> 00:22:18,780
我怀念的就是那种一打开电脑就马上能开始打代码的感觉

341
00:22:18,780 --> 00:22:23,760
我怀念那种BASIC给你的 和机器硬件间的直接连接

342
00:22:24,960 --> 00:22:28,980
这可能也就是为什么最近我对Linux不那么感冒的原因

343
00:22:28,980 --> 00:22:35,240
因为在80年代 所有的东西都是这种的

344
00:22:35,240 --> 00:22:39,240
纯文字的界面 我倒反而不是那么舍不得这种感觉

345
00:22:39,240 --> 00:22:41,840
因为我过去就是这么用电脑的

346
00:22:42,700 --> 00:22:47,680
但是年轻的人 可能就是怀念这些电脑的浪漫吧

347
00:22:48,460 --> 00:22:52,060
好了 这期视频就到这里了 稍微有点长

348
00:22:52,060 --> 00:22:54,420
但是在结束前我还想说几句话

349
00:22:54,420 --> 00:22:59,320
首先 感谢LGR的Clint 还有Jim Leonard以及Ben Heck

350
00:23:00,440 --> 00:23:03,520
这期本来还要更长

351
00:23:03,520 --> 00:23:08,020
但是最后还是砍掉了不少内容

352
00:23:08,600 --> 00:23:13,620
因为我觉得 与其做一期超长的视频

353
00:23:13,620 --> 00:23:17,340
不如分开来 有些内容可以单独做几期内容

354
00:23:17,340 --> 00:23:21,519
比如说我就打算做一集关于VIC-20 Super Expander的视频

355
00:23:21,520 --> 00:23:26,020
我知道有点多余 但是这个卡带还是有很多有趣的点的

356
00:23:26,080 --> 00:23:27,820
所以我打算做一期那个

357
00:23:27,820 --> 00:23:31,600
还有其它的一些主题 本期也算是做一个概览

358
00:23:31,600 --> 00:23:34,640
所以不要觉得像是错过了几个亿的内容

359
00:23:34,640 --> 00:23:36,139
我最后都会涉及到的

360
00:23:36,660 --> 00:23:40,320
同时 关注我的频道

361
00:23:40,880 --> 00:23:47,600
我现在全职做视频了 希望能为大家带来更多内容吧

362
00:23:47,920 --> 00:23:48,900
下次见