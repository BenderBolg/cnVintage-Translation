1
00:00:09,814 --> 00:00:12,758
欢迎收看古董电脑绘图原理的第二部分

2
00:00:12,887 --> 00:00:18,086
上一集我讲了如红白机、C64这类机型的做法

3
00:00:18,278 --> 00:00:22,087
这一集就来讲讲Apple II和一些其它的系统

4
00:00:22,246 --> 00:00:27,078
Apple II是这些里面最难解释的一种图形系统

5
00:00:27,238 --> 00:00:33,286
而且甚至按照你的显示器不同具有两种完全不同的方式

6
00:00:33,478 --> 00:00:35,350
也就是分成单色显示器和彩色显示器

7
00:00:36,807 --> 00:00:37,990
以这个为例

8
00:00:38,150 --> 00:00:42,022
这是每种显示器上像素放大的样子

9
00:00:42,279 --> 00:00:44,902
为了具体了解为什么是这个样子

10
00:00:45,014 --> 00:00:46,872
我们来进一步细分

11
00:00:47,031 --> 00:00:51,382
屏幕被分成了一个个包括7个像素的单元

12
00:00:52,294 --> 00:00:54,518
来看看单元当中发生了什么

13
00:00:54,710 --> 00:00:58,742
7个像素一共由8个二进制位来确定

14
00:00:58,966 --> 00:01:01,174
剩下一个位用来选择调色板

15
00:01:03,126 --> 00:01:04,182
在一个单色显示器上

16
00:01:04,390 --> 00:01:06,266
如果你让内存变成这样

17
00:01:06,458 --> 00:01:10,586
1对应的位会被点亮，也就是预期的这样

18
00:01:11,322 --> 00:01:13,818
那么这个位开关有什么用呢

19
00:01:14,011 --> 00:01:15,450
并没有！

20
00:01:15,738 --> 00:01:20,683
所以在单色显示器上，AppleII的画面还是很干脆的

21
00:01:20,842 --> 00:01:22,762
对于商业用途还是很不错的

22
00:01:23,578 --> 00:01:26,666
现在加上一个彩色显示器用于对比

23
00:01:26,874 --> 00:01:33,722
在显示器上第一个会注意到的事情就是文字有了彩边

24
00:01:33,930 --> 00:01:38,650
这种现象是有原因的，实际上也就是这个机器产生色彩的原理

25
00:01:38,874 --> 00:01:40,890
回到之前的像素图

26
00:01:41,082 --> 00:01:44,122
点亮一些位的结果会是一些颜色

27
00:01:44,314 --> 00:01:48,970
接着可以用移动位的方式来改变颜色

28
00:01:49,194 --> 00:01:53,082
一边是绿色，另一边是亮紫色

29
00:01:53,274 --> 00:01:56,794
如果连续两个像素点亮则是白色

30
00:01:57,018 --> 00:02:00,074
于是这就给了你四种可能的颜色

31
00:02:00,282 --> 00:02:02,682
但是别忘了这里还有一个控制位

32
00:02:02,890 --> 00:02:05,050
看看现在调整这个位会有什么效果

33
00:02:05,306 --> 00:02:07,802
注意颜色变成了橘黄色和蓝色

34
00:02:08,027 --> 00:02:12,187
所以额外的一位带来了额外的两种颜色

35
00:02:12,426 --> 00:02:15,754
但是要注意到，在同一个7像素单元中

36
00:02:15,946 --> 00:02:17,754
这两种颜色和这两种颜色不能共用

37
00:02:18,028 --> 00:02:21,850
所以要让屏幕上的蓝色和绿色相邻就比较麻烦

38
00:02:22,042 --> 00:02:23,594
除非你刚好对齐了

39
00:02:24,522 --> 00:02:29,403
于是你看见白色的字看起来就会变成彩色的

40
00:02:29,626 --> 00:02:34,830
刚刚我们在讨论的是几乎所有游戏使用的高分辨率模式

41
00:02:34,986 --> 00:02:38,875
但是AppleII同样提供了一个40*40像素的低分辨率模式

42
00:02:39,082 --> 00:02:40,842
像素变得非常大

43
00:02:41,018 --> 00:02:45,706
但是你将能使用16种颜色所以AppleII自称为16色计算机

44
00:02:45,898 --> 00:02:50,714
之后当苹果推出AppleIIc和AppleIIe电脑的时候

45
00:02:50,890 --> 00:02:53,706
他们确实增强了颜色显示能力和高分辨率模式

46
00:02:53,914 --> 00:02:58,892
但是实际上因为开发者希望保持兼容性而很少被使用

47
00:02:59,098 --> 00:03:02,570
如果你觉得难以理解没有关系

48
00:03:02,763 --> 00:03:05,514
没几个人搞的明白（不是吧……）

49
00:03:05,722 --> 00:03:08,138
另外我还讲下

50
00:03:08,347 --> 00:03:14,698
因为有些人可能认为高分辨率模式下只有这么点颜色也太惨了

51
00:03:15,002 --> 00:03:19,994
请记住这个机器是在1977年发布的

52
00:03:20,170 --> 00:03:23,930
比红白机和Commodore整整早了5年

53
00:03:24,138 --> 00:03:26,474
现在还剩下一种图形方式

54
00:03:26,682 --> 00:03:29,018
称为CPU驱动图形

55
00:03:29,226 --> 00:03:30,522
让我来告诉你这是啥

56
00:03:30,778 --> 00:03:34,586
在这个演示里我画了一些放大的像素点

57
00:03:34,794 --> 00:03:42,843
请记住像素点是从屏幕的左上角，从左到右从上到下，一个个画出来的

58
00:03:43,018 --> 00:03:46,314
当然一般每秒这样要刷新30次

59
00:03:47,210 --> 00:03:50,074
大部分的电脑具有一个独立的视频芯片

60
00:03:50,315 --> 00:03:54,378
用于产生脉冲来在合适的时间向显示器发送正确的数据

61
00:03:54,618 --> 00:03:57,322
然而有些系统根本没有图形芯片

62
00:03:57,530 --> 00:03:59,866
然后使用CPU直接产生脉冲

63
00:04:00,058 --> 00:04:04,666
这种方法确实可行，但是会占用大量的CPU时间

64
00:04:04,827 --> 00:04:09,467
结果就是留给游戏代码的CPU时间就相当少了

65
00:04:09,722 --> 00:04:12,298
想象一下如果现在的电脑也是这么设计的话

66
00:04:12,506 --> 00:04:16,474
然后你打开任务管理器，永远都有一个叫Video Generator的进程

67
00:04:16,634 --> 00:04:20,714
占用了你90%的CPU时间，多蛋疼

68
00:04:21,420 --> 00:04:26,010
所以给Atari2600设计的游戏其实都面临着这个挑战

69
00:04:26,218 --> 00:04:29,834
实际上如果你注意下一些游戏屏幕的左边

70
00:04:30,026 --> 00:04:32,266
看见这些迷之黑条了么

71
00:04:32,474 --> 00:04:38,954
这些其实就是因为CPU没有办法同时产生图形以及运行游戏代码

72
00:04:39,658 --> 00:04:49,210
而且我这里想额外提一点，就是即使主机拥有独立的显示芯片，也可以使用CPU驱动法

73
00:04:49,402 --> 00:04:52,394
还记得上集提到过的颜色单元吗

74
00:04:52,587 --> 00:04:54,810
如果开发者想这么做

75
00:04:54,986 --> 00:04:58,490
他可以在每一行都改变颜色调色板

76
00:04:58,698 --> 00:05:01,802
这就可以在C64上实现一些效果非常棒的画作

77
00:05:01,978 --> 00:05:06,570
然而并没有游戏会这么做应该需要用尽几乎所有的CPU时间

78
00:05:06,762 --> 00:05:14,506
这一集的内容差不多就是这些，下一集我们来讲讲古董电脑的声音

79
00:05:14,698 --> 00:05:19,434
如果有可能的话还会有视频讲讲IBM的CGA、EGA和VGA模式

80
00:05:19,642 --> 00:05:27,338
别忘了投币+关注，有空也可以看看我的脸书，下次见

