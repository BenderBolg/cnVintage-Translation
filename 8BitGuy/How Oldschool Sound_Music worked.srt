1
00:00:09,926 --> 00:00:12,151
大家吼 我是来自The8BitGuy的David

2
00:00:12,389 --> 00:00:15,829
今天我们有一个特殊的嘉宾――来自ObsoleteGeek的Rob

3
00:00:16,261 --> 00:00:19,558
今天我们来讲讲古董电脑的声音是如何产生的

4
00:00:23,061 --> 00:00:25,013
在早期的家用电脑中

5
00:00:25,157 --> 00:00:27,894
它们大多数只有很普通的蜂鸣器或者喇叭（Beeper Speaker）

6
00:00:28,070 --> 00:00:31,045
比如IBM-PC和Apple II就是很好的例子

7
00:00:31,238 --> 00:00:34,453
这些喇叭是直接受电脑CPU控制的

8
00:00:34,693 --> 00:00:41,749
喇叭可以发出滴滴的声音 而CPU必须合理的控制时间以产生特定的频率

9
00:00:42,597 --> 00:00:44,805
如果一个程序员真的想要花时间

10
00:00:44,981 --> 00:00:48,005
声音效果确实可以做得很高级

11
00:00:48,181 --> 00:00:52,677
但是问题就是这将会用去所有的CPU时间来达成这一点

12
00:00:52,853 --> 00:00:55,685
也就导致电脑没有时间干任何别的事情了

13
00:01:02,247 --> 00:01:07,269
所以80年代早期，大部分的电脑和游戏机都有一个独立的音效芯片

14
00:01:07,429 --> 00:01:09,109
来降低CPU的负载

15
00:01:09,926 --> 00:01:14,968
那时的游戏声音和画面都非常有特点

16
00:01:15,160 --> 00:01:17,960
每种游戏主机也有各自的特点

17
00:01:18,655 --> 00:01:24,617
首先你要知道的是，不同的主机拥有不同的声音通道

18
00:01:25,033 --> 00:01:28,888
为了更好的演示，用一下这台古董级的电子琴

19
00:01:29,096 --> 00:01:31,883
它只有一个通道，也就是如你所见

20
00:01:32,104 --> 00:01:35,048
同时只能播放一种声音

21
00:01:35,273 --> 00:01:38,376
如果要同时播放两种，你就需要至少两个通道

22
00:01:38,617 --> 00:01:42,152
这个琴就比刚才那个更加高级一点

23
00:01:42,328 --> 00:01:46,296
它有整整四个通道，也就是可以同时播放四种声音

24
00:01:49,672 --> 00:01:57,228
拥有多个通道当然是好事，但是每个通道最好还能产生不同的波形

25
00:01:58,956 --> 00:02:03,996
比如这个键盘可以调整通道的波形来产生不同的声音

26
00:02:05,056 --> 00:02:09,039
现在我们来看看80年代两个比较流行的系统

27
00:02:09,228 --> 00:02:11,532
他们分别使用了两种不同的方法来产生音乐

28
00:02:12,172 --> 00:02:14,492
NES（美版红白机）拥有5个通道

29
00:02:15,420 --> 00:02:17,932
Commodore64拥有3个通道

30
00:02:19,020 --> 00:02:21,788
第一眼看上去似乎是红白机更好些

31
00:02:21,980 --> 00:02:23,724
然而实际上并不是，原因如下

32
00:02:24,940 --> 00:02:28,732
大部分红白机的通道，都只能产生一种波形

33
00:02:29,068 --> 00:02:33,388
前两个通道只能产生像这样的方波

34
00:02:38,444 --> 00:02:43,276
第三个通道则只能产生三角波，通常用作鼓点

35
00:02:47,388 --> 00:02:49,084
第四个通道则是产生杂波

36
00:02:53,649 --> 00:02:57,580
第五个通道是用来产生PCM采样的声音，基本上都不会去使用

37
00:02:57,788 --> 00:03:00,318
讲例子的话就是Super Mario Bros 3

38
00:03:00,556 --> 00:03:03,740
你可以很明显的听到立体的鼓点声

39
00:03:07,660 --> 00:03:09,468
因为任天堂设计就是这样

40
00:03:09,676 --> 00:03:11,804
几乎所有的游戏音乐都是这种风格

41
00:03:11,996 --> 00:03:16,716
合理的比喻应该说是使用了同一种乐器

42
00:03:17,196 --> 00:03:21,916
Commodore64具有3个通道，但是他可以产生4中不同的波形

43
00:03:22,172 --> 00:03:27,661
方波、三角波、锯齿波和杂波

44
00:03:28,045 --> 00:03:29,608
或者任意的组合

45
00:03:29,800 --> 00:03:34,489
一开始程序员通常都让某个通道工作在特定的某个模式下

46
00:03:34,632 --> 00:03:36,521
然后整个曲子一直使用这个设定

47
00:03:36,713 --> 00:03:38,441
当然这也是最简单实现的

48
00:03:38,616 --> 00:03:40,585
以游戏MULE为例

49
00:03:56,345 --> 00:04:03,038
但是没过多久，一些机智的开发者意识到可以即时重新调整波形模式

50
00:04:03,456 --> 00:04:06,280
这就可以给人一种拥有超过三个通道的假象

51
00:04:06,889 --> 00:04:08,296
以这个为例

52
00:04:18,873 --> 00:04:20,601
为了更好地理解到底发生了什么

53
00:04:20,777 --> 00:04:22,536
试试一次只听一个通道

54
00:04:33,273 --> 00:04:37,529
过了一段时间 IBM-PC也终于拥有了不错的音频系统

55
00:04:37,689 --> 00:04:38,552
就是通过AdLib卡

56
00:04:39,193 --> 00:04:41,704
使用了雅马哈YM3812芯片

57
00:04:41,913 --> 00:04:48,794
在之后占有大量市场份额的SoundBlaster卡同样使用了YM3812芯片

58
00:04:49,112 --> 00:04:56,332
这个芯片几乎就是之后十年之中IBM-PC声音系统的根基

59
00:04:56,521 --> 00:04:59,385
YM3812拥有9个通道

60
00:04:59,592 --> 00:05:03,321
而且就像Commodore64一样，每个通道可以独立编程

61
00:05:03,513 --> 00:05:07,784
巧合的是，这个芯片同样被用于一些Yamaha的电子琴

62
00:05:08,088 --> 00:05:12,170
比如这个，拆开来就能看见YM3812

63
00:05:12,397 --> 00:05:17,835
实际上拿张SoundBlaster卡，接上喇叭和按键，其实就可以当电子琴玩了

64
00:05:18,041 --> 00:05:21,534
来听听这个从游戏Ultima VI中截取的一段声音

65
00:05:30,936 --> 00:05:34,216
再来听听我用电子琴重现这个声音

66
00:05:51,593 --> 00:05:53,865
现在我们来聊聊采样

67
00:05:54,041 --> 00:05:57,546
这个电子琴还有一个功能我还没演示过

68
00:05:57,725 --> 00:06:00,457
于1985年生产，它拥有4个通道

69
00:06:00,617 --> 00:06:03,849
但是有趣的是，它支持采样

70
00:06:03,977 --> 00:06:05,176
让我来演示下这是什么意思

71
00:06:13,353 --> 00:06:19,768
不过这并不是1985唯一的支持采样的系统

72
00:06:19,976 --> 00:06:22,201
另外一个，就是Commodore Amiga

73
00:06:22,426 --> 00:06:29,065
Commodore Amiga是第一个支持四通道采样的家用计算机系统

74
00:06:42,569 --> 00:06:46,168
同样，也出现了全新的计算机音乐软件――MOD Tracker

75
00:06:46,712 --> 00:06:50,024
它内置采样信息和音乐信息

76
00:06:52,185 --> 00:06:56,457
最初的版本拥有4个通道，就是为Amiga设计的

77
00:06:56,649 --> 00:07:00,473
当然后来的版本增加了更多的通道以适配更加复杂的声卡

78
00:07:11,256 --> 00:07:13,064
这种文件格式现在仍然在被使用

79
00:07:13,288 --> 00:07:15,241
被用于创作音乐

80
00:07:16,457 --> 00:07:19,864
不过MOD Tracker现在应用确实大不如以前

81
00:07:20,040 --> 00:07:24,169
现在的电脑的存储对于音频采样存储来说是相当充裕了

82
00:07:24,408 --> 00:07:30,489
因此大部分情况下就直接把和弦后的波形做成一个大的采样存下来好了

83
00:07:30,664 --> 00:07:32,009
通常格式就是MP3

84
00:07:32,393 --> 00:07:37,912
好了本期就到这里，希望各位能了解到一些新的知识

85
00:07:38,973 --> 00:07:41,947
同时说明下我已经修改了频道的名称

86
00:07:42,217 --> 00:07:56,378
从iBookGuy变成了The8BitGuy因为这个名字更能代表这个频道的内容

87
00:07:56,617 --> 00:08:01,513
再次感谢Rob能过来一起做这期视频

88
00:08:01,912 --> 00:08:02,873
Rob也来讲讲自己的频道吧

89
00:08:03,225 --> 00:08:05,834
感谢能让我出镜其实我也是你的粉丝

90
00:08:06,025 --> 00:08:10,088
我通常在频道里面讲到东西通常都更加古怪一些

91
00:08:10,302 --> 00:08:13,192
主要是和游戏有关的硬件

92
00:08:13,496 --> 00:08:16,137
比如这台来自日本的SHARP X68000电脑

93
00:08:16,491 --> 00:08:19,192
是我最喜欢的系统之一

94
00:08:19,880 --> 00:08:23,465
如果你想看到更多关于这个奇怪的系统的内容

95
00:08:23,722 --> 00:08:26,937
简介里面有一个链接可以到它的频道

96
00:08:27,144 --> 00:08:31,001
他确实有一些挺有趣的收藏

97
00:08:31,352 --> 00:08:36,313
别忘了来看看我的Facebook页面，我们下次再见

